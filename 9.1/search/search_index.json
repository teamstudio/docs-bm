{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Documentation This is the documentation for Teamstudio Build Manager 9.1.","title":"Documentation"},{"location":"#documentation","text":"This is the documentation for Teamstudio Build Manager 9.1.","title":"Documentation"},{"location":"acl/","text":"ACL and ACL Entries Set the ACL of the file being promoted. Note The ACL will be set for the file (normally a template) that is being promoted. The ACL of any dataase linked to this template will not be affected. To Set a Database or Template ACL Select the Build or Promotion Path that relates to the database or template, for which you want to set a specific ACL. Click the Create action button and select ACL . The ACL document appears. The ACL document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Set Production ACL ). Select a stored ACL or define your own. For a stored ACL Select the Store ACL option. Select a stored ACL from the list Click OK. For a defined ACL Select the Define ACL here option. In the Roles field, enter the roles you want to use for this database. Enter one role per line. These roles appear when you add new ACL Entry documents to your database, within Build Manager. In the Administration Server field, enter the name of the target database\u2019s administration server. Enter an Administration Server Flag or select one from the list. Select Enforce a consistent ACL across all replicas to ensure consistent ACLs across replicas. Select the Maximum Internet name and password from the list. Save and close the document. It is normally a requirement that the ID being used to perform the promotion be given Manager rights to the database being promoted, otherwise when the database is promoted a second time, the promoting ID will not have rights to overwrite it. The new ACL entry appears in the right pane, under the Build or Promotion Path to which it applies. To add ACL entries: Select the ACL document under the Build or Promotion Path that relates to the database or template, for which you want to add ACL Entries. Click the Create action button and select ACL Entry . The ACL Entry document appears The ACL document is active by default. Leave this setting. Use the dropdown beside the Name field to select a name from one or more address books. To set the default user ACL, use the text -Default- as the name. Use the dropdown beside the Type field to select the ACL type specific to this entry. Use the dropdown beside the Level field to select the ACL level specific to this entry. When you select a level, additional checkboxes appear, letting you specify optional and default access rights (for example, to replicate or copy documents, or to create documents.) Select the roles that are specific to this entry. The available roles are those defined in the parent ACL entry. Save and close the document. The new ACL entry appears in the right pane, under the ACL to which it applies. If you create an ACL Entry action, Build Manager requires that you have a least one manager defined in the ACL entries before you can promote.","title":"ACL and ACL Entries"},{"location":"acl/#acl-and-acl-entries","text":"Set the ACL of the file being promoted. Note The ACL will be set for the file (normally a template) that is being promoted. The ACL of any dataase linked to this template will not be affected.","title":"ACL and ACL Entries"},{"location":"acl/#to-set-a-database-or-template-acl","text":"Select the Build or Promotion Path that relates to the database or template, for which you want to set a specific ACL. Click the Create action button and select ACL . The ACL document appears. The ACL document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Set Production ACL ). Select a stored ACL or define your own. For a stored ACL Select the Store ACL option. Select a stored ACL from the list Click OK. For a defined ACL Select the Define ACL here option. In the Roles field, enter the roles you want to use for this database. Enter one role per line. These roles appear when you add new ACL Entry documents to your database, within Build Manager. In the Administration Server field, enter the name of the target database\u2019s administration server. Enter an Administration Server Flag or select one from the list. Select Enforce a consistent ACL across all replicas to ensure consistent ACLs across replicas. Select the Maximum Internet name and password from the list. Save and close the document. It is normally a requirement that the ID being used to perform the promotion be given Manager rights to the database being promoted, otherwise when the database is promoted a second time, the promoting ID will not have rights to overwrite it. The new ACL entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Set a Database or Template ACL"},{"location":"acl/#to-add-acl-entries","text":"Select the ACL document under the Build or Promotion Path that relates to the database or template, for which you want to add ACL Entries. Click the Create action button and select ACL Entry . The ACL Entry document appears The ACL document is active by default. Leave this setting. Use the dropdown beside the Name field to select a name from one or more address books. To set the default user ACL, use the text -Default- as the name. Use the dropdown beside the Type field to select the ACL type specific to this entry. Use the dropdown beside the Level field to select the ACL level specific to this entry. When you select a level, additional checkboxes appear, letting you specify optional and default access rights (for example, to replicate or copy documents, or to create documents.) Select the roles that are specific to this entry. The available roles are those defined in the parent ACL entry. Save and close the document. The new ACL entry appears in the right pane, under the ACL to which it applies. If you create an ACL Entry action, Build Manager requires that you have a least one manager defined in the ACL entries before you can promote.","title":"To add ACL entries:"},{"location":"agentserver/","text":"Set Agent Server Set the Run On Server property for scheduled agents. To Set Agent Server Select the Build or Promotion Path that relates to the database or template for which you want to apply a server to its scheduled agents. Click the Create action button and select Set Agent Server . The Set Agent Server document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Sales Server). Enter the server name. Leave this field blank for a local PC. Use * for any server. In the Apply To section, the checked scheduled or event-triggered agents in the target database have the Run On Server property set. Save and close the document. The new Set Agent Server entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Set Agent Server"},{"location":"agentserver/#set-agent-server","text":"Set the Run On Server property for scheduled agents.","title":"Set Agent Server"},{"location":"agentserver/#to-set-agent-server","text":"Select the Build or Promotion Path that relates to the database or template for which you want to apply a server to its scheduled agents. Click the Create action button and select Set Agent Server . The Set Agent Server document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Sales Server). Enter the server name. Leave this field blank for a local PC. Use * for any server. In the Apply To section, the checked scheduled or event-triggered agents in the target database have the Run On Server property set. Save and close the document. The new Set Agent Server entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Set Agent Server"},{"location":"approval/","text":"Approvals Step The Approval Step implements an approval workflow for any stage of the build process where a template is moved. The date and approver are logged for audit purposes. Configuring an Approval Step Select the Promotion path document to which you want to add the Approval step. Click the Create button and select Approval . The Approval document appears. In the Approval document the Active radio button should be Yes . Fill in the Description and any required comments. On the Basics tab the following properties can be changed. Approval Workflow This should be set to Build Manager Approval from the drop down list. Approvals are the only workflows currently supported. Approvers Authorized individuals or groups from the NAB that can perform the approval. Notify on approval Individuals or groups from the NAB that need to know when a database has been approved so the process can continue. Notify on promotion complete Individuals or groups from the NAB that need to know when a database has been promoted to an environment. Save and close the document. The new Approval entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Approvals Step"},{"location":"approval/#approvals-step","text":"The Approval Step implements an approval workflow for any stage of the build process where a template is moved. The date and approver are logged for audit purposes.","title":"Approvals Step"},{"location":"approval/#configuring-an-approval-step","text":"Select the Promotion path document to which you want to add the Approval step. Click the Create button and select Approval . The Approval document appears. In the Approval document the Active radio button should be Yes . Fill in the Description and any required comments. On the Basics tab the following properties can be changed. Approval Workflow This should be set to Build Manager Approval from the drop down list. Approvals are the only workflows currently supported. Approvers Authorized individuals or groups from the NAB that can perform the approval. Notify on approval Individuals or groups from the NAB that need to know when a database has been approved so the process can continue. Notify on promotion complete Individuals or groups from the NAB that need to know when a database has been promoted to an environment. Save and close the document. The new Approval entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Configuring an Approval Step"},{"location":"audit/","text":"Design Audit Configure a design audit for one or more databases. Note This action requires that a licensed copy of Teamstudio Analyzer is installed on each workstation that is performing a promotion. It also requires Reader access to the selected filters database. To Configure a Design Audit Select the Build or Promotion Path that relates to the database or template you want to audit. Click the Create button and select Design Audit . The Audit Design document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Corporate Standards ). Click the Browse button and select a filter database. Select a filter class. Define the analysis output database. Select the server name. Enter the path. Select Yes if you want to keep Analyzer output after the promotion has completed. Enter the analysis output title. Define the audit output database. Select the server name. Enter the path. Enter the audit output title. Select Incremental Update to analyze only those design elements that have changed since Analyzer was last run against them. Only the documents corresponding to modified design elements are updated. Specify the design elements you want to audit. If you do not specify one or more design elements, all design elements are audited. Check the Failure Threshold box if you want the build process to fail if any high or medium priority warnings are discovered during the build process. The new Design Audit entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Design Audit"},{"location":"audit/#design-audit","text":"Configure a design audit for one or more databases. Note This action requires that a licensed copy of Teamstudio Analyzer is installed on each workstation that is performing a promotion. It also requires Reader access to the selected filters database.","title":"Design Audit"},{"location":"audit/#to-configure-a-design-audit","text":"Select the Build or Promotion Path that relates to the database or template you want to audit. Click the Create button and select Design Audit . The Audit Design document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Corporate Standards ). Click the Browse button and select a filter database. Select a filter class. Define the analysis output database. Select the server name. Enter the path. Select Yes if you want to keep Analyzer output after the promotion has completed. Enter the analysis output title. Define the audit output database. Select the server name. Enter the path. Enter the audit output title. Select Incremental Update to analyze only those design elements that have changed since Analyzer was last run against them. Only the documents corresponding to modified design elements are updated. Specify the design elements you want to audit. If you do not specify one or more design elements, all design elements are audited. Check the Failure Threshold box if you want the build process to fail if any high or medium priority warnings are discovered during the build process. The new Design Audit entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Configure a Design Audit"},{"location":"automating/","text":"Automating Promotions Version 9.0 and later of Teamstudio Build Manager support running Promotions via the command-line using TeamstudioBuildManager.exe. The executable uses its return value to indicate the status of the promotion, and accepts parameters to control logging, providing an easy way to integrate Build Manager to build and deploy code as part of larger projects that employ build tools such as ANT or Continuous Integration build tools. Note In 64 bit client environemnts, the executable is named TeamstudioBuildManager64.exe rather than TeamstudioBuildManager.exe . All of the references in these instructions should be modified as appropriate. Using the Executable TeamstudioBuildManager.exe is installed in the Notes executable directory when a Notes client is first used to run a promotion. It can also be detached from the Page design element (BMSupportingFiles) in the Build Manager NTF. The executable must be run from the Notes executable directory of a Notes client installation on Windows. Running the executable without any arguments will display usage information, including the parameters that can be specified. Running Promotions The minimum required parameters to run a simple promotion are the -promote command followed by parameters specifying the server and path of the Build Manager instance, and the Note ID or UNID of the promotion path to run. Invoking TeamstudioBuildManager.exe without additional arguments displays documentation for additional parameters. Note Examples below that do not specify -id and -password will require the password of the current Notes ID to be entered, unless Notes is running and the security setting Don't prompt for password for 3rd party Notes applications has been enabled. For more information on using IDs, including requirements to run promotions that switch ID, see the Credentials section below. The following example runs the promotion identified by the Note ID B82 in the Build Manager database in the root of the server DomSrv01's data directory TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -promonoteid \"B82\" The promotion to run can alternately be identified by passing arguments identifying the source template and the promotion path. The following specifies a promotion using the Database (watch) document for the Inventory database on DomSvr01, and a child Promotion Path document with the value \"To QA\" as its Description. TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -srcdb \"DomSvr01!!dev\\templates\\Inventory.nsf\" -promopath \"To QA\" Note that the -srcdb parameter specifies a source database spec in terms of main documents in the target Build Manager. It can specify a Database document by the server and path of the database as stored in the Database document, in the form !! , or it can specify a Template Registry template in the form !! , where TemplateRegistryName is the name of a Stored Template Registry in the target Build Manager, and TemplateName is the name of a template in the specified Template Registry. Combined with the -promopath argument, it forms a unique key for a specific promotion. The example below runs a promotion based on a Template Registry template, and uses several additional parameters Build number of the build in the Template Registry that should be used Comment for the build Notes ID used to initialize the Notes session Notes ID Password Notes INI file to use File path for a log file where logging should be redirected TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -srcdb \"ProductionTR!!Inventory_template\" -promopath \"To Production\" -buildnum 7 -comment \"Automated build\" -id \"c:\\lotus\\notes\\autobuild.id\" -password \"buildPassword\" -i \"c:\\lotus\\notes\\autobuildINI.ini\" -log \"c:\\builds\\autobuild.txt\" Return Value The return code from the process returns 0 for success (the build passed) or a non-zero error code if the build fails. Errors are printed to the console (or logged in the log file, if specified), and are also recorded in the log (report) document created in the logs section of the Build Manager database. Logging The output to the console (or log file if specified) is the same content that is saved in the Report (log) document stored in Build Manager (and displayed in the Build Manager status plugin, when running in the foreground). Running command-line promotions still creates the log document in Build Manager; the -loglevel parameter can be used to reduce the amount of output to the console or the log file, but does not decrease the logging saved to build Manager. The -l or -log parameter can be used to specify a log file where output should be sent. Credentials Specify the -id and -password parameters to allow the executable to initiate a Notes session and connect to the target Build Manager on server. If no credentials are specified, the executable will attempt to create the session with the current ID of the client, usually the ID specified in the Notes.ini. If the ID requires a password, the Notes API will intercept the authentication request, and prompt for the current ID's password, blocking the executable until entered. Promotions that specify a Promote As id, or use Switch ID steps, must provide the -password argument to run. Passwords are passed on the command line as plain text. A special single-purpose build ID can be created to run automated promotions to improve security, using the Promote As option for Promotion Paths to switch to appropriate Production or Signing IDs. If the build ID and password are compromised, this ID may still have access to run promotions in Build Manager until the password is changed or the ID is replaced, However, the security risks are greatly reduced, since the build ID need not have access to production environments. Limitations UI Interactions Command-line promotions cannot run promotions that trigger any kind of UI interaction. Currently, the following parameters can be used to prevent UI interaction -comment provides the comment for the build, and suppresses any prompt for comment that may normally be required. -buildnum specifies the Build Number for the template being extracted from a Template Registry, and suppresses any prompt to choose a build, if required. Any other UI interaction triggered by the promotion will generally fail with typical error messages (e.g. \"Product object cannot be created\"), with the exception of external code, such as CIAO!, which may raise its own dialogs. This will block the promotion, for example, if a Make Version step is configured to prompt for the version information. Unicode The executable, by default, prints log entries to the console in Unicode to support non-ASCII characters. This Unicode translation can be slow, and can be disabled if not required by specifying the -u parameter. The Notes client occasionally prints directly to the output stream and can corrupt multibyte log streams. In general, the best option is to specify the -log parameter, since the log file supports Unicode and will not be corrupted by unexpected output from Notes.","title":"Automating Promotions"},{"location":"automating/#automating-promotions","text":"Version 9.0 and later of Teamstudio Build Manager support running Promotions via the command-line using TeamstudioBuildManager.exe. The executable uses its return value to indicate the status of the promotion, and accepts parameters to control logging, providing an easy way to integrate Build Manager to build and deploy code as part of larger projects that employ build tools such as ANT or Continuous Integration build tools. Note In 64 bit client environemnts, the executable is named TeamstudioBuildManager64.exe rather than TeamstudioBuildManager.exe . All of the references in these instructions should be modified as appropriate.","title":"Automating Promotions"},{"location":"automating/#using-the-executable","text":"TeamstudioBuildManager.exe is installed in the Notes executable directory when a Notes client is first used to run a promotion. It can also be detached from the Page design element (BMSupportingFiles) in the Build Manager NTF. The executable must be run from the Notes executable directory of a Notes client installation on Windows. Running the executable without any arguments will display usage information, including the parameters that can be specified.","title":"Using the Executable"},{"location":"automating/#running-promotions","text":"The minimum required parameters to run a simple promotion are the -promote command followed by parameters specifying the server and path of the Build Manager instance, and the Note ID or UNID of the promotion path to run. Invoking TeamstudioBuildManager.exe without additional arguments displays documentation for additional parameters. Note Examples below that do not specify -id and -password will require the password of the current Notes ID to be entered, unless Notes is running and the security setting Don't prompt for password for 3rd party Notes applications has been enabled. For more information on using IDs, including requirements to run promotions that switch ID, see the Credentials section below. The following example runs the promotion identified by the Note ID B82 in the Build Manager database in the root of the server DomSrv01's data directory TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -promonoteid \"B82\" The promotion to run can alternately be identified by passing arguments identifying the source template and the promotion path. The following specifies a promotion using the Database (watch) document for the Inventory database on DomSvr01, and a child Promotion Path document with the value \"To QA\" as its Description. TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -srcdb \"DomSvr01!!dev\\templates\\Inventory.nsf\" -promopath \"To QA\" Note that the -srcdb parameter specifies a source database spec in terms of main documents in the target Build Manager. It can specify a Database document by the server and path of the database as stored in the Database document, in the form !! , or it can specify a Template Registry template in the form !! , where TemplateRegistryName is the name of a Stored Template Registry in the target Build Manager, and TemplateName is the name of a template in the specified Template Registry. Combined with the -promopath argument, it forms a unique key for a specific promotion. The example below runs a promotion based on a Template Registry template, and uses several additional parameters Build number of the build in the Template Registry that should be used Comment for the build Notes ID used to initialize the Notes session Notes ID Password Notes INI file to use File path for a log file where logging should be redirected TeamstudioBuildManager.exe -promote -bm \"DomSvr01!!BuildManager.nsf\" -srcdb \"ProductionTR!!Inventory_template\" -promopath \"To Production\" -buildnum 7 -comment \"Automated build\" -id \"c:\\lotus\\notes\\autobuild.id\" -password \"buildPassword\" -i \"c:\\lotus\\notes\\autobuildINI.ini\" -log \"c:\\builds\\autobuild.txt\"","title":"Running Promotions"},{"location":"automating/#return-value","text":"The return code from the process returns 0 for success (the build passed) or a non-zero error code if the build fails. Errors are printed to the console (or logged in the log file, if specified), and are also recorded in the log (report) document created in the logs section of the Build Manager database.","title":"Return Value"},{"location":"automating/#logging","text":"The output to the console (or log file if specified) is the same content that is saved in the Report (log) document stored in Build Manager (and displayed in the Build Manager status plugin, when running in the foreground). Running command-line promotions still creates the log document in Build Manager; the -loglevel parameter can be used to reduce the amount of output to the console or the log file, but does not decrease the logging saved to build Manager. The -l or -log parameter can be used to specify a log file where output should be sent.","title":"Logging"},{"location":"automating/#credentials","text":"Specify the -id and -password parameters to allow the executable to initiate a Notes session and connect to the target Build Manager on server. If no credentials are specified, the executable will attempt to create the session with the current ID of the client, usually the ID specified in the Notes.ini. If the ID requires a password, the Notes API will intercept the authentication request, and prompt for the current ID's password, blocking the executable until entered. Promotions that specify a Promote As id, or use Switch ID steps, must provide the -password argument to run. Passwords are passed on the command line as plain text. A special single-purpose build ID can be created to run automated promotions to improve security, using the Promote As option for Promotion Paths to switch to appropriate Production or Signing IDs. If the build ID and password are compromised, this ID may still have access to run promotions in Build Manager until the password is changed or the ID is replaced, However, the security risks are greatly reduced, since the build ID need not have access to production environments.","title":"Credentials"},{"location":"automating/#limitations","text":"","title":"Limitations"},{"location":"automating/#ui-interactions","text":"Command-line promotions cannot run promotions that trigger any kind of UI interaction. Currently, the following parameters can be used to prevent UI interaction -comment provides the comment for the build, and suppresses any prompt for comment that may normally be required. -buildnum specifies the Build Number for the template being extracted from a Template Registry, and suppresses any prompt to choose a build, if required. Any other UI interaction triggered by the promotion will generally fail with typical error messages (e.g. \"Product object cannot be created\"), with the exception of external code, such as CIAO!, which may raise its own dialogs. This will block the promotion, for example, if a Make Version step is configured to prompt for the version information.","title":"UI Interactions"},{"location":"automating/#unicode","text":"The executable, by default, prints log entries to the console in Unicode to support non-ASCII characters. This Unicode translation can be slow, and can be disabled if not required by specifying the -u parameter. The Notes client occasionally prints directly to the output stream and can corrupt multibyte log streams. In general, the best option is to specify the -log parameter, since the log file supports Unicode and will not be corrupted by unexpected output from Notes.","title":"Unicode"},{"location":"behalf/","text":"Set Agent On Behalf Of Set the Run On Behalf Of property for agents. To Set Agent On Behalf Of Select the Build or Promotion Path that relates to the database or template for which you want to apply the setting. Click the Create action button and select Set Agent On Behalf Of . The Set Agent On Behalf Of document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Enter the user name the agent should run as. In the Apply To section, check the agents in the target database that should have the property set. Save and close the document. The new Set Agent Run On Behalf Of entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Set Agent On Behalf Of"},{"location":"behalf/#set-agent-on-behalf-of","text":"Set the Run On Behalf Of property for agents.","title":"Set Agent On Behalf Of"},{"location":"behalf/#to-set-agent-on-behalf-of","text":"Select the Build or Promotion Path that relates to the database or template for which you want to apply the setting. Click the Create action button and select Set Agent On Behalf Of . The Set Agent On Behalf Of document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Enter the user name the agent should run as. In the Apply To section, check the agents in the target database that should have the property set. Save and close the document. The new Set Agent Run On Behalf Of entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Set Agent On Behalf Of"},{"location":"bpcreate/","text":"Creating a Build Path Build Manager can promote templates to two types of targets. Promotion Paths are used to promote a template to a server and file path, and are used to move templates into new environments for deployment. Build Paths create a build (version) of a template in a Template Registry, as part of a release control process. Templates in a Template Registry can later be deployed to environments using Promotion Paths. This help topic covers creating a Build Path. For information on Promotion Paths, see Creating a Promotion Path . Build Paths specify a Template Registry where a version of an application template can be created. To configure a build path document, you create and name the build path and select the promotion options. Build Steps can be created as child documents for the build path, to enable additional actions on the template during the build. To create and name a build path From the CIAO Config database, select the database document you want to create a promotion path for. From the Create menu, click Build Path . You see the Build Path document. Select Yes beside the Active field, if not already selected. In the Description field, enter a name describing the promotion path, for example, Dev>QA . This field cannot be blank and must be unique. If the source is a template stored in a Template Registry The Registry Settings pane is displayed. Select the Version Options setting that should be used to determine the build to be promoted. Optionally, configure Deployment Tracking . The choice of Template Registry and Template are determined by the settings of the parent Database document. To configure the copy settings for the build path You can configure the copy settings for the promotion path as follows. From the Build Path document, select the Basics tab. Select the Template Registry where the new template build should be created. The Registry must be defined in the Stored Resources section under Template Registries. In the Template Name field, specify the desired name which will identify the template. This name will be used as the key to identify a particular set of template versions, and will override any value set in the source database's Template Name field. In the File Name field, optionally specify the filename to use when storing the version. If blank, the name of the source file will be used. In the Modified Only field, the default Copy Entire Database action is generally appropriate. The Copy Modified Elements Only option requires careful configuration, and is only recommended in environments where remote users may need to replicate design changes over very low-bandwith connections such as cellular. For more information, see Modify-Only Builds Enter a Notes selection formula in the Copy Documents field (for example, SELECT @ALL ) if you have documents that must stay with the database or template. To create a CIAO change report in the Template Registry, select Create CIAO! Change Report and configure the Change Report fields as appropriate. CIAO must be installed and configured to watch the source database to use this feature, and the build steps must include an active Make Version step set to use the Use Version Number option for the CIAO label. To limit which users can run the build List users who are allowed to run the build on the Authority & IDs tab. To run the build as an alternate ID Select an ID to use on the Authority & IDs tab. To configure Build Path options You can configure the Build options of the build path as follows To prompt the person promoting the database to enter a Promotion Comment during promotion, check Prompt for Comments . To require the comment, also check Comment Required . In the Notify on failure field, browse to select names from one or more address books to designate who to e-mail upon failure of a promotion. The promoter (the person who clicks the Promote button) is always notified with a status window at the end of the promotion.","title":"Creating a Build Path"},{"location":"bpcreate/#creating-a-build-path","text":"Build Manager can promote templates to two types of targets. Promotion Paths are used to promote a template to a server and file path, and are used to move templates into new environments for deployment. Build Paths create a build (version) of a template in a Template Registry, as part of a release control process. Templates in a Template Registry can later be deployed to environments using Promotion Paths. This help topic covers creating a Build Path. For information on Promotion Paths, see Creating a Promotion Path . Build Paths specify a Template Registry where a version of an application template can be created. To configure a build path document, you create and name the build path and select the promotion options. Build Steps can be created as child documents for the build path, to enable additional actions on the template during the build.","title":"Creating a Build Path"},{"location":"bpcreate/#to-create-and-name-a-build-path","text":"From the CIAO Config database, select the database document you want to create a promotion path for. From the Create menu, click Build Path . You see the Build Path document. Select Yes beside the Active field, if not already selected. In the Description field, enter a name describing the promotion path, for example, Dev>QA . This field cannot be blank and must be unique.","title":"To create and name a build path"},{"location":"bpcreate/#if-the-source-is-a-template-stored-in-a-template-registry","text":"The Registry Settings pane is displayed. Select the Version Options setting that should be used to determine the build to be promoted. Optionally, configure Deployment Tracking . The choice of Template Registry and Template are determined by the settings of the parent Database document.","title":"If the source is a template stored in a Template Registry"},{"location":"bpcreate/#to-configure-the-copy-settings-for-the-build-path","text":"You can configure the copy settings for the promotion path as follows. From the Build Path document, select the Basics tab. Select the Template Registry where the new template build should be created. The Registry must be defined in the Stored Resources section under Template Registries. In the Template Name field, specify the desired name which will identify the template. This name will be used as the key to identify a particular set of template versions, and will override any value set in the source database's Template Name field. In the File Name field, optionally specify the filename to use when storing the version. If blank, the name of the source file will be used. In the Modified Only field, the default Copy Entire Database action is generally appropriate. The Copy Modified Elements Only option requires careful configuration, and is only recommended in environments where remote users may need to replicate design changes over very low-bandwith connections such as cellular. For more information, see Modify-Only Builds Enter a Notes selection formula in the Copy Documents field (for example, SELECT @ALL ) if you have documents that must stay with the database or template. To create a CIAO change report in the Template Registry, select Create CIAO! Change Report and configure the Change Report fields as appropriate. CIAO must be installed and configured to watch the source database to use this feature, and the build steps must include an active Make Version step set to use the Use Version Number option for the CIAO label.","title":"To configure the copy settings for the build path"},{"location":"bpcreate/#to-limit-which-users-can-run-the-build","text":"List users who are allowed to run the build on the Authority & IDs tab.","title":"To limit which users can run the build"},{"location":"bpcreate/#to-run-the-build-as-an-alternate-id","text":"Select an ID to use on the Authority & IDs tab.","title":"To run the build as an alternate ID"},{"location":"bpcreate/#to-configure-build-path-options","text":"You can configure the Build options of the build path as follows To prompt the person promoting the database to enter a Promotion Comment during promotion, check Prompt for Comments . To require the comment, also check Comment Required . In the Notify on failure field, browse to select names from one or more address books to designate who to e-mail upon failure of a promotion. The promoter (the person who clicks the Promote button) is always notified with a status window at the end of the promotion.","title":"To configure Build Path options"},{"location":"buildsteps/","text":"Build Steps The simplest build path consists of a configuration document, describing the source template (or database), and a Promotion Path document, describing the target template location. On top of this Build Manager provides the ability to add any or all of the following optional steps. ACL Settings - Sets the general ACL and specific ACL entries for the promoted template. Approval \u2013 Implements an approval workflow for any stage of the build process where a template is moved. The date and approver are logged for audit purposes. Compile LotusScript \u2013 Allows the compilation of all LotusScript or specific LotusScript elements within a promoted template as part of the build. Create Test Data \u2013 Reset test environments with data stored in an external location Custom Step \u2013 Create custom code that can be run by Build Manager as a step, to automate specific build requirements that cannot be met by existing steps. Database Copy \u2013 Allows another copy of the source template to be made and placed in a different location. Database Properties \u2013 Allows the title, categories, inherited from template name and master template name to be set, cleared or left alone. Also, version information such as the Template Version, Name and Date as well as the $TemplateBuild shared field can be edited. Design Audit \u2013 Calls Teamstudio Analyzer and checks the design of the source template against your coding and look and feel standards. Element Properties \u2013 Allows the Prohibit Design Refresh flag, Propagate Prohibition flag, Design Element Inheritance option, and Design Element Comment field to be edited. Email Notification \u2013 Can be used to send email messages to individuals and/or groups at one or more points in a promotion. Enable Agents \u2013 Allows scheduled agents in the template to be enabled or disabled. Make Version \u2013 Calls Teamstudio CIAO! and makes a controlled version of the design template. Modify-only - An advanced Build step option to run Modified-Only builds that help reduce the impact of design refreshes on production servers. Refresh/Replace Design \u2013 Allows one or more target databases to have their designs refreshed or replaced with the promoted template. Run Agent \u2013 Allows any external agent to be run and parameters to be passed as part of a build. Commonly used to create test databases containing clean data in builds to test environments, but can be used to supplement the capabilities of Build Manager with custom functionality. Run Command \u2013 Run an external program or command via shell script. Search and Replace \u2013 Calls Teamstudio Configurator allowing a search and replace to be done as part of the build. This is an excellent way to stamp user-visible elements of the design with the version number and the date of creation. Send Console Command \u2013 Send a remote console command to a Domino server. Set Agent On Behalf Of \u2013 Allows scheduled agents in the template to be set to run on behalf of a particular user ID. Set Agent Server \u2013 Allows scheduled agents in the template to be assigned a server to run on. Sign Database \u2013 Allows the design (or database) to be signed by a specific or stored ID as part of the build. Switch ID \u2013 Switch to a different Notes ID for part of a Promotion.","title":"Build Steps"},{"location":"buildsteps/#build-steps","text":"The simplest build path consists of a configuration document, describing the source template (or database), and a Promotion Path document, describing the target template location. On top of this Build Manager provides the ability to add any or all of the following optional steps. ACL Settings - Sets the general ACL and specific ACL entries for the promoted template. Approval \u2013 Implements an approval workflow for any stage of the build process where a template is moved. The date and approver are logged for audit purposes. Compile LotusScript \u2013 Allows the compilation of all LotusScript or specific LotusScript elements within a promoted template as part of the build. Create Test Data \u2013 Reset test environments with data stored in an external location Custom Step \u2013 Create custom code that can be run by Build Manager as a step, to automate specific build requirements that cannot be met by existing steps. Database Copy \u2013 Allows another copy of the source template to be made and placed in a different location. Database Properties \u2013 Allows the title, categories, inherited from template name and master template name to be set, cleared or left alone. Also, version information such as the Template Version, Name and Date as well as the $TemplateBuild shared field can be edited. Design Audit \u2013 Calls Teamstudio Analyzer and checks the design of the source template against your coding and look and feel standards. Element Properties \u2013 Allows the Prohibit Design Refresh flag, Propagate Prohibition flag, Design Element Inheritance option, and Design Element Comment field to be edited. Email Notification \u2013 Can be used to send email messages to individuals and/or groups at one or more points in a promotion. Enable Agents \u2013 Allows scheduled agents in the template to be enabled or disabled. Make Version \u2013 Calls Teamstudio CIAO! and makes a controlled version of the design template. Modify-only - An advanced Build step option to run Modified-Only builds that help reduce the impact of design refreshes on production servers. Refresh/Replace Design \u2013 Allows one or more target databases to have their designs refreshed or replaced with the promoted template. Run Agent \u2013 Allows any external agent to be run and parameters to be passed as part of a build. Commonly used to create test databases containing clean data in builds to test environments, but can be used to supplement the capabilities of Build Manager with custom functionality. Run Command \u2013 Run an external program or command via shell script. Search and Replace \u2013 Calls Teamstudio Configurator allowing a search and replace to be done as part of the build. This is an excellent way to stamp user-visible elements of the design with the version number and the date of creation. Send Console Command \u2013 Send a remote console command to a Domino server. Set Agent On Behalf Of \u2013 Allows scheduled agents in the template to be set to run on behalf of a particular user ID. Set Agent Server \u2013 Allows scheduled agents in the template to be assigned a server to run on. Sign Database \u2013 Allows the design (or database) to be signed by a specific or stored ID as part of the build. Switch ID \u2013 Switch to a different Notes ID for part of a Promotion.","title":"Build Steps"},{"location":"ciaoconfig/","text":"Understanding CIAO Config Information Teamstudio Build Manager is a superset of the functionality available in the Teamstudio CIAO configuration database, and can be used as a drop-in replacement for the CIAO configuration database. Build Manager does not require CIAO to be installed for the majority of its functionality, such as promoting templates, deploying applications, and tracking release versions in a Template Registry. However, understanding the basic concepts involved in configuring CIAO can be useful in configuring the Build Manager environment. The source for any Promotion in Build Manager is a Database Document , which represents either A database (template) residing on a server, identified by the server and file path. This is the information that CIAO uses to identify a database under source control, and is often referred to as a Watch Document . A template version stored in a Template Registry, identified by the Stored Template Registry definition, and the Template Name of the template as defined in the Registry. The selection of the version (build) of the template to promote is defined in Promotion Paths attached to Database Documents that target Template Registry templates. For more information about Promotion Paths and how they work with Database Documents, see Promotion Paths . The table below lists the fields that can be configured to control CIAO on a Database Document that specifies a database on a server. Only the Database Server, Database Path, and Project fields are relevant when using Build Manager without CIAO. Category Description Basics Database Title, Database Server, Database Path, Project, CIAO! Watch Active, Log Server, Log Path Watch Watch Documents, Watch Template Linked Elements, CIAO! Owner in Note Comment, Mandatory Comments Authority Add, Check Out, Check In, Delete, Grab, Make Version Issues Copy Issue Settings, Issue Database Server, Issue Database Path, Issue Selection, Issue View, Issue Required Versioning Custom Version Label Settings Advanced DBID (the database ID of the watched database), Log Key","title":"Understanding CIAO Config Information"},{"location":"ciaoconfig/#understanding-ciao-config-information","text":"Teamstudio Build Manager is a superset of the functionality available in the Teamstudio CIAO configuration database, and can be used as a drop-in replacement for the CIAO configuration database. Build Manager does not require CIAO to be installed for the majority of its functionality, such as promoting templates, deploying applications, and tracking release versions in a Template Registry. However, understanding the basic concepts involved in configuring CIAO can be useful in configuring the Build Manager environment. The source for any Promotion in Build Manager is a Database Document , which represents either A database (template) residing on a server, identified by the server and file path. This is the information that CIAO uses to identify a database under source control, and is often referred to as a Watch Document . A template version stored in a Template Registry, identified by the Stored Template Registry definition, and the Template Name of the template as defined in the Registry. The selection of the version (build) of the template to promote is defined in Promotion Paths attached to Database Documents that target Template Registry templates. For more information about Promotion Paths and how they work with Database Documents, see Promotion Paths . The table below lists the fields that can be configured to control CIAO on a Database Document that specifies a database on a server. Only the Database Server, Database Path, and Project fields are relevant when using Build Manager without CIAO. Category Description Basics Database Title, Database Server, Database Path, Project, CIAO! Watch Active, Log Server, Log Path Watch Watch Documents, Watch Template Linked Elements, CIAO! Owner in Note Comment, Mandatory Comments Authority Add, Check Out, Check In, Delete, Grab, Make Version Issues Copy Issue Settings, Issue Database Server, Issue Database Path, Issue Selection, Issue View, Issue Required Versioning Custom Version Label Settings Advanced DBID (the database ID of the watched database), Log Key","title":"Understanding CIAO Config Information"},{"location":"compile/","text":"Compile LotusScript To Compile LotusScript Select the Build or Promotion Path that relates to the database or template for which you want to compile the LotusScript. Click the Create action button and select Compile LotusScript . The Compile LotusScript document appears The Compile All LotusScript document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, LotusScript Compile ). The Produce detailed compilation log field is checked by default. Leave this setting. The Promotion Log document lists each element that is compiled. If an error occurs, the element is listed with the error. Select Compile all notes to compile all notes or select Compile elements by Note ID to compile selected notes using the Note ID. If you selected Compile elements by Note ID, specify one note ID per line in hexadecimal. Save and close. The new Compile All LotusScript entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Compile LotusScript"},{"location":"compile/#compile-lotusscript","text":"","title":"Compile LotusScript"},{"location":"compile/#to-compile-lotusscript","text":"Select the Build or Promotion Path that relates to the database or template for which you want to compile the LotusScript. Click the Create action button and select Compile LotusScript . The Compile LotusScript document appears The Compile All LotusScript document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, LotusScript Compile ). The Produce detailed compilation log field is checked by default. Leave this setting. The Promotion Log document lists each element that is compiled. If an error occurs, the element is listed with the error. Select Compile all notes to compile all notes or select Compile elements by Note ID to compile selected notes using the Note ID. If you selected Compile elements by Note ID, specify one note ID per line in hexadecimal. Save and close. The new Compile All LotusScript entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Compile LotusScript"},{"location":"console/","text":"Send Console Command Send a remote console command to a server. Note This step is new in Build Manager 8.0 To Create a Console Command Select the Promotion path document to which you want to add the Send Console Command step. Click the Create action button and select Send Console Command . The Send Console Command document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Select the Target Server for the command to run on. The Promoting user must have the right to execute remote console commands on this server, or the step will fail. Specify the Command to run. Note that the command drop all will end Build Manager's connection to this server and most likely fail the promotion. Optionally, specify a value in seconds in the Pause field to have Build Manager wait for that interval before proceeding with the next step. Return Values Build Manager will log the immediate output of the command to the Build Manager log. Many useful commands only return the suggestion to open a Live Console Session to view output, so processing the output of the remote command is of little use. If requirements dictate determining whether an operation succeeded, a Run Agent step can be used, either in lieu of this step or running after this step.","title":"Send Console Command"},{"location":"console/#send-console-command","text":"Send a remote console command to a server. Note This step is new in Build Manager 8.0","title":"Send Console Command"},{"location":"console/#to-create-a-console-command","text":"Select the Promotion path document to which you want to add the Send Console Command step. Click the Create action button and select Send Console Command . The Send Console Command document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Select the Target Server for the command to run on. The Promoting user must have the right to execute remote console commands on this server, or the step will fail. Specify the Command to run. Note that the command drop all will end Build Manager's connection to this server and most likely fail the promotion. Optionally, specify a value in seconds in the Pause field to have Build Manager wait for that interval before proceeding with the next step.","title":"To Create a Console Command"},{"location":"console/#return-values","text":"Build Manager will log the immediate output of the command to the Build Manager log. Many useful commands only return the suggestion to open a Live Console Session to view output, so processing the output of the remote command is of little use. If requirements dictate determining whether an operation succeeded, a Run Agent step can be used, either in lieu of this step or running after this step.","title":"Return Values"},{"location":"customstep/","text":"Custom Steps Build Manager supports the creation of custom build steps that can be used to add features to the product by including the step in any Promotion Path. Custom Steps allow organizations to address specific build needs by writing LotusScript code that can be invoked during the build at a specific point. Because Custom Steps are run in the current context of the build, they run in client under the authority of the Notes ID (including Promote-as IDs) and have access to certain build artifacts, including the database currently being built, information stored in build variables (such as used in Macro replacements), and the Step documents that are part of the current build. Creating a Custom Step consists of Adding a new form to represent the UI for configuring the Custom Step. Writing LotusScript to accomplish the desired action in a class that extends the class ActionExtension in the Custom Action Extensions script library. Registering the new class in the function RegisterCustomActions in the Custom Action Extensions script library. Once a custom step is registered (Build Manager must be exited and reopened to pick up changes), Custom Steps can be added to a promotion from the left-hand navigator, by selecting the promotion path and choosing Admin|Actions...|Custom... and selecting the desired step. Custom Steps can act on the following events. GetUserInput Called before the promotion switches to the background process to allow UI interaction if needed. ValidateAction Called twice, once in the foreground process and once in the background process, so that the step can validate any pre-conditions. ProcessCustomAction Called during the actual build (at the point where the step is included in the promotion) for the step to do its primary work. Each event is passed appropriate parameters to provide easy access to build artifacts. All events provide access to the Step Document for the custom step, which can read settings, and be used as a starting point to locate other Step documents. ProcessCustomAction provides access to the database being created by the build. Custom Step classes and methods are documented in the source code. Questions about creating Custom Steps should be directed to techsupport@teamstudio.com . Note, however, that Teamstudio cannot support the custom code you write as part of an action, but only the framework itself. Custom Action Utility class Custom Step code can also make use of a utility class, ActionExtensionUtility , that provides utility functions to simplify certain actions such as logging, using build macros, and retrieving the Promotion Path and Database document. The class \u2013 along with documentation \u2013 is in the Custom Action Extension script library. Using data collected by Custom Steps In some circumstances it may be useful to retrieve data related to the current promotion and pass it on to the build log for the promotion, store it with a template created in Template Registry, or include it in an Approval request in the Build Manager Workflow database. One example of using this functionality might be to persist information about a Change Control request or approval made in an external system and related to the current promotion, and display it on the resulting build in the Template Registry. As of Build Manager 8.1, the ActionExtensionUtility class includes the method SetWFProperty to allow String data to be stored in the build log and Template Registry documents, and passed to Approvals workflows. The SetWFProperty function stores the String in a field named for the property name passed to the function, but prefixed with $WF$ \u2013 for example, calling SetWFProperty with the name ChangeControlNum and the value 1234 will result in a text field named $WF$ChangeControlNum on both the build log and on the Template document in Template Registry (if applicable), with the value 1234 . Both the Build Manager Report form (the promotion log) and the Database Template Information form in Template Registry contain a subform that can be customized to display this information and protected from design refresh to preserve it during upgrades. One possible use is pass a Notes URL via SetWFProperty and use code in the subform to open it via @URLOpen(). Build Manager Approvals workflows (based on Workflow.ntf provided with the Build Manager download) can also make use of these fields, by creating additional variables in the main Workflow Definition document and using a formula to set the workflow variable to the value of the $WF$-named field. Note that the workflow variable name should match the $WF$-named field to allow the eventual promotion to retrieve the value for display in the build log. For more information on customizing the Approvals workflow, contact techsupport@teamstudio.com .","title":"Custom Steps"},{"location":"customstep/#custom-steps","text":"Build Manager supports the creation of custom build steps that can be used to add features to the product by including the step in any Promotion Path. Custom Steps allow organizations to address specific build needs by writing LotusScript code that can be invoked during the build at a specific point. Because Custom Steps are run in the current context of the build, they run in client under the authority of the Notes ID (including Promote-as IDs) and have access to certain build artifacts, including the database currently being built, information stored in build variables (such as used in Macro replacements), and the Step documents that are part of the current build. Creating a Custom Step consists of Adding a new form to represent the UI for configuring the Custom Step. Writing LotusScript to accomplish the desired action in a class that extends the class ActionExtension in the Custom Action Extensions script library. Registering the new class in the function RegisterCustomActions in the Custom Action Extensions script library. Once a custom step is registered (Build Manager must be exited and reopened to pick up changes), Custom Steps can be added to a promotion from the left-hand navigator, by selecting the promotion path and choosing Admin|Actions...|Custom... and selecting the desired step. Custom Steps can act on the following events. GetUserInput Called before the promotion switches to the background process to allow UI interaction if needed. ValidateAction Called twice, once in the foreground process and once in the background process, so that the step can validate any pre-conditions. ProcessCustomAction Called during the actual build (at the point where the step is included in the promotion) for the step to do its primary work. Each event is passed appropriate parameters to provide easy access to build artifacts. All events provide access to the Step Document for the custom step, which can read settings, and be used as a starting point to locate other Step documents. ProcessCustomAction provides access to the database being created by the build. Custom Step classes and methods are documented in the source code. Questions about creating Custom Steps should be directed to techsupport@teamstudio.com . Note, however, that Teamstudio cannot support the custom code you write as part of an action, but only the framework itself.","title":"Custom Steps"},{"location":"customstep/#custom-action-utility-class","text":"Custom Step code can also make use of a utility class, ActionExtensionUtility , that provides utility functions to simplify certain actions such as logging, using build macros, and retrieving the Promotion Path and Database document. The class \u2013 along with documentation \u2013 is in the Custom Action Extension script library.","title":"Custom Action Utility class"},{"location":"customstep/#using-data-collected-by-custom-steps","text":"In some circumstances it may be useful to retrieve data related to the current promotion and pass it on to the build log for the promotion, store it with a template created in Template Registry, or include it in an Approval request in the Build Manager Workflow database. One example of using this functionality might be to persist information about a Change Control request or approval made in an external system and related to the current promotion, and display it on the resulting build in the Template Registry. As of Build Manager 8.1, the ActionExtensionUtility class includes the method SetWFProperty to allow String data to be stored in the build log and Template Registry documents, and passed to Approvals workflows. The SetWFProperty function stores the String in a field named for the property name passed to the function, but prefixed with $WF$ \u2013 for example, calling SetWFProperty with the name ChangeControlNum and the value 1234 will result in a text field named $WF$ChangeControlNum on both the build log and on the Template document in Template Registry (if applicable), with the value 1234 . Both the Build Manager Report form (the promotion log) and the Database Template Information form in Template Registry contain a subform that can be customized to display this information and protected from design refresh to preserve it during upgrades. One possible use is pass a Notes URL via SetWFProperty and use code in the subform to open it via @URLOpen(). Build Manager Approvals workflows (based on Workflow.ntf provided with the Build Manager download) can also make use of these fields, by creating additional variables in the main Workflow Definition document and using a formula to set the workflow variable to the value of the $WF$-named field. Note that the workflow variable name should match the $WF$-named field to allow the eventual promotion to retrieve the value for display in the build log. For more information on customizing the Approvals workflow, contact techsupport@teamstudio.com .","title":"Using data collected by Custom Steps"},{"location":"dbcopy/","text":"Database Copy Automatically create database copies. To Copy a Database Select the Build or Promotion Path that relates to the database or template for which you want to copy. Click the Create action button and select Copy Database . The Copy Database document appears. The Copy Database document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Copy of CRM for Test ). Enter the Promote to Server name. This field cannot be blank. Enter the Promote to Path . This field must be relative to the data directory on the destination server. Leave this field blank to specify the data directory itself. If you omit the database name, the current name is used. Enter a Notes selection formula for Copy Documents (for example, SELECT @ALL ) if you have documents that must travel with the database or template. The Overwrite field is checked by default. This overwrites old copies of the file being copied. If you uncheck this setting, the Fail on Exit ? option appears (checked by default), allowing you to specify that a promotion fails when the Overwrite field is unchecked and the destination database you are copying already exists. Save and close the document. The new Copy Database entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Database Copy"},{"location":"dbcopy/#database-copy","text":"Automatically create database copies.","title":"Database Copy"},{"location":"dbcopy/#to-copy-a-database","text":"Select the Build or Promotion Path that relates to the database or template for which you want to copy. Click the Create action button and select Copy Database . The Copy Database document appears. The Copy Database document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Copy of CRM for Test ). Enter the Promote to Server name. This field cannot be blank. Enter the Promote to Path . This field must be relative to the data directory on the destination server. Leave this field blank to specify the data directory itself. If you omit the database name, the current name is used. Enter a Notes selection formula for Copy Documents (for example, SELECT @ALL ) if you have documents that must travel with the database or template. The Overwrite field is checked by default. This overwrites old copies of the file being copied. If you uncheck this setting, the Fail on Exit ? option appears (checked by default), allowing you to specify that a promotion fails when the Overwrite field is unchecked and the destination database you are copying already exists. Save and close the document. The new Copy Database entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Copy a Database"},{"location":"dbprops/","text":"Database Properties Set database properties. To Set Database Properties Select the Build or Promotion Path that relates to the database or template that properties you want to set Click the Create button and select Database Properties . The Database Properties document appears The Database Properties document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Update DB Title on Production Server ). To modify the title of the database, enter an appropriate value into the Title field. You can clear this property prior to running this action. Enter one or more categories into the Categories field. You can clear this property prior to running this action. Enter a template name from which the current database inherits, into the Inherit From field. The template name can also be removed using the Clear This Property option. Enter a different template name if this is a master template. If a field is blank and Clear This Property is not checked then no changes are imposed and the field keeps its original value. Save and close the document. The new Database Properties entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Database Properties"},{"location":"dbprops/#database-properties","text":"Set database properties.","title":"Database Properties"},{"location":"dbprops/#to-set-database-properties","text":"Select the Build or Promotion Path that relates to the database or template that properties you want to set Click the Create button and select Database Properties . The Database Properties document appears The Database Properties document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Update DB Title on Production Server ). To modify the title of the database, enter an appropriate value into the Title field. You can clear this property prior to running this action. Enter one or more categories into the Categories field. You can clear this property prior to running this action. Enter a template name from which the current database inherits, into the Inherit From field. The template name can also be removed using the Clear This Property option. Enter a different template name if this is a master template. If a field is blank and Clear This Property is not checked then no changes are imposed and the field keeps its original value. Save and close the document. The new Database Properties entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Set Database Properties"},{"location":"elemprops/","text":"Element Properties Set certain design element properties during the promotion. To Configure/Set Element Properties Select the Build or Promotion Path that relates to the database or template for which you want to edit the element properties. Click the Create action button and select Element Properties . The Element Properties document appears. The Element Properties document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Edit element properties ). On the Basics tab the following properties can be changed Prohibit Design Refresh Affects Prohibit design refresh or replace to modify on the elements\u2019 design properties. Propagate Prohibition Affects Propagate this prohibition of design change on the elements\u2019 design properties. Apply To List the elements that the changes will be applied to. Leave this field blank to apply to all elements. On the Design Class/Comments tab the following properties can be changed. Design Element Inheritance Affects Inherit from the design template on the elements' properties. Design Element Comment Modifies any Comment field on the design element. Save and close. The new Element Properties entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Element Properties"},{"location":"elemprops/#element-properties","text":"Set certain design element properties during the promotion.","title":"Element Properties"},{"location":"elemprops/#to-configureset-element-properties","text":"Select the Build or Promotion Path that relates to the database or template for which you want to edit the element properties. Click the Create action button and select Element Properties . The Element Properties document appears. The Element Properties document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Edit element properties ). On the Basics tab the following properties can be changed Prohibit Design Refresh Affects Prohibit design refresh or replace to modify on the elements\u2019 design properties. Propagate Prohibition Affects Propagate this prohibition of design change on the elements\u2019 design properties. Apply To List the elements that the changes will be applied to. Leave this field blank to apply to all elements. On the Design Class/Comments tab the following properties can be changed. Design Element Inheritance Affects Inherit from the design template on the elements' properties. Design Element Comment Modifies any Comment field on the design element. Save and close. The new Element Properties entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Configure/Set Element Properties"},{"location":"email/","text":"Email Notification Setup email notification. To Set Email Notification Select the Build or Promotion Path that relates to the database or template for which you want to notify people or groups, via email, that the promotion was a success. Click the Create action button and select Email Notification . The Email Notification document appears The E-mail Notification document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Status Report ). In the Recipients field, click the dropdown to select names from the address book to send e-mail notification to, upon successful promotion of this database to the target server. In the Subject field, enter the subject you want to appear in the Subject field in the e-mail notification (for example, New template has been moved to QA ). Select from among the following options, based on earlier steps in the build process. Include promoted database as an attachment Include build comment in the e-mail body Include Make Version comment in e-mail body \u2013 Include doc link to the promoted template Include doc link to the refreshed database(s) In the Message field, enter the body of the e-mail notification (for example, Please test this database ). The e-mail notification contains document links to the Build Manager report and the promotion path used. The Build Manager report details the steps taken during the promotion. It is also saved in the Teamstudio Build Manager database. Save and close the document. The new E-mail Notification entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Email Notification"},{"location":"email/#email-notification","text":"Setup email notification.","title":"Email Notification"},{"location":"email/#to-set-email-notification","text":"Select the Build or Promotion Path that relates to the database or template for which you want to notify people or groups, via email, that the promotion was a success. Click the Create action button and select Email Notification . The Email Notification document appears The E-mail Notification document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Status Report ). In the Recipients field, click the dropdown to select names from the address book to send e-mail notification to, upon successful promotion of this database to the target server. In the Subject field, enter the subject you want to appear in the Subject field in the e-mail notification (for example, New template has been moved to QA ). Select from among the following options, based on earlier steps in the build process. Include promoted database as an attachment Include build comment in the e-mail body Include Make Version comment in e-mail body \u2013 Include doc link to the promoted template Include doc link to the refreshed database(s) In the Message field, enter the body of the e-mail notification (for example, Please test this database ). The e-mail notification contains document links to the Build Manager report and the promotion path used. The Build Manager report details the steps taken during the promotion. It is also saved in the Teamstudio Build Manager database. Save and close the document. The new E-mail Notification entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Set Email Notification"},{"location":"enableagents/","text":"Enabling Scheduled Agents Enable scheduled agents. To Enable Scheduled Agents Select the Build or Promotion Path that relates to the database or template for which you want to enable scheduled agents Click the Create action button and select Enable Agents . The Enable Agents document appears. The Enable Scheduled Agents document is active by default. Leave this setting. Enter a descriptive name in the Description field. All scheduled or event-triggered agents in the source database appear in a table. Check each agent you want enabled or disabled for the target database. Check the Push these changes out to refreshed databases option if you want to force an update of the enable/disable state during a design refresh. Save and close. The new Enable Scheduled Agents entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Enabling Scheduled Agents"},{"location":"enableagents/#enabling-scheduled-agents","text":"Enable scheduled agents.","title":"Enabling Scheduled Agents"},{"location":"enableagents/#to-enable-scheduled-agents","text":"Select the Build or Promotion Path that relates to the database or template for which you want to enable scheduled agents Click the Create action button and select Enable Agents . The Enable Agents document appears. The Enable Scheduled Agents document is active by default. Leave this setting. Enter a descriptive name in the Description field. All scheduled or event-triggered agents in the source database appear in a table. Check each agent you want enabled or disabled for the target database. Check the Push these changes out to refreshed databases option if you want to force an update of the enable/disable state during a design refresh. Save and close. The new Enable Scheduled Agents entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Enable Scheduled Agents"},{"location":"errors/","text":"Common Error Messages This section covers the causes of some common errors in the Build Manager promotion log. Your Address Book does not contain any cross certificates capable of authenticating the server Sample Log 11/03/2006 05:06:49 PM EST: : Calling sign utility... 11/03/2006 05:06:51 PM EST: : Error: Your Address Book does not contain any cross certificates capable of authenticating the server. 11/03/2006 05:06:51 PM EST: : Action Failed: actSIGN Cause The signing utility in Build Manager is detached to your local data directory to run. This error indicates that the ID being used by the signing utility does not have a cross certificate in your local name and address book for the server where the promotion was targeted. Have your administrator create a cross certificate in your local name and address book. Unable to find path to server Sample Log 11/03/2006 04:22:22 PM EST: : Calling sign utility... 11/03/2006 04:22:29 PM EST: : Error: Unable to find path to server 11/03/2006 04:22:29 PM EST: : Action Failed: actSIGN Cause The signing utility in Build Manager is detached to your local data directory to run. This error indicates that the ID being used by the signing utility cannot find the correct connection document for the target promotion server in your local name and address book. This is exacerbated by the fact there could be multiple local name and address books. Have your administrator create the correct connection documents in all of your local name and address books. Or, use your standard Notes client for promotions. You are not authorized to promote database Sample Log 11/03/2006 03:17:28 PM EST: : You are not authorized to promote this database with the selected promotion path. 11/03/2006 03:17:28 PM EST: : Promotion failed. Cause The ID you have used to sign onto the Notes client is not present in the promote authority field on the promotion path document in Build Manager for the database you are attempting to promote. This field is checked to see if you have rights to press the promote button for this database. This field supports groups. Have your administrator add your name explicitly to the promotion authority field or to one of the groups (in the domino directory) that are present in the promote authority field on the stored server document for the promotion target server. Database properties could not be set Sample Log 11/03/2006 03:43:42 PM EST: : Set Database inherit from to: 11/03/2006 03:43:42 PM EST: : Database properties could not be set. Most likely cause is that the master template name was already in use. Check the log.nsf database on the destination server. 11/03/2006 03:43:42 PM EST: : Action Failed: actDBPROP Cause There are two potential reasons for this issue. First, the ID being used for changing the database properties in the database properties step does not have permissions on the target server to create master templates. If the promotion path does not switch to another ID to perform the promotion (i.e. Perform Promotion as someone else) then it is the ID you used to sign onto the Notes client. If the promotion path does switch to another ID, then it is the ID used by Build Manager. Have your administrator add the name of the ID being used to the Create master templates field on the target server document in the domino directory or to one of the group documents in the Domino Directory that are already present in the Create master templates field on the target server document in the domino directory. Second, the master template name the program is attempting to implement on the promoted database is already in use. This applies only for Notes 6.x.x servers and above. Investigate where the master template name is currently being used and change it or change the master template name you are currently attempting to implement. CIAO must be installed to use this feature Sample Log 10/04/2006 03:22:01 PM EDT: : Database copied to : Templates\\Colonypo.ntf On JBXNU01/APPS/SRV/FPLDEV 10/04/2006 03:22:01 PM EDT: : Error: CIAO Must be installed to use this feature. on line 20 in MAKEVERSION 10/04/2006 03:22:01 PM EDT: : Action Failed: actMAKEVERSION Cause Teamstudio CIAO is not installed or implemented properly on the workstation attempting the promotion. This only happens if there is a make version action in the promotion process. There are multiple reasons for this, the least of which is that CIAO is not installed. If CIAO is not installed, install it or deactivate the Make Version step in the promotion process. If CIAO! is installed and not implemented correctly you should contact Teamstudio support. Failed to bump version number Sample Log 10/20/2009 11:12:50 AM CDT: The log document does not have any version numbers. using initial values from config document 10/20/2009 11:12:50 AM CDT: WARNING: Version was successful, but failed to bump version number. (@1) 10/20/2009 11:12:50 AM CDT: Action Failed: actMAKEVERSION Cause The Teamstudio CIAO Log, as defined on the Teamstudio CIAO Configuration document, does not contain any Database Version History for the database being promoted. Open the database in Teamstudio CIAO, and make a version of it. Incorrect Stored or Attached ID Being Used Sample Log 10/04/2006 03:29:50 PM EDT: : Found stored id: FPL Template Signer' 10/04/2006 03:29:50 PM EDT: : Error: Type mismatch on line 65 in DETACHID 10/04/2006 03:29:50 PM EDT: : Error: Could not detatch id file 10/04/2006 03:29:50 PM EDT: : Action Failed: actSIGN Cause This typically indicates that the password entered for the stored or attached ID being used by the signing utility is incorrect. Have your administrator check the signing step in the promotion process being used to see if it is an attached ID or a stored ID and then go to the document for the ID being used and reenter the password. Unchanged Documents Being Promoted Sample Log 10/05/2006 03:41:21 PM EDT: : Calling sign utility... 10/05/2006 03:41:21 PM EDT: : Error: No documents have been modified since specified time. 10/05/2006 03:41:21 PM EDT: : Action Failed: actSIGN 10/05/2006 03:41:21 PM EDT: : Promo Cause You are attempting to promote documents that have not changed since the last promotion. No ID File Attached Sample Log 01/17/2007 10:54:06 AM EST: : Found stored id: Test ID' 01/17/2007 10:54:06 AM EST: : Error: Type mismatch on line 65 in DETACHID 01/17/2007 10:54:06 AM EST: : Error: Could not detatch id file 01/17/2007 10:54:06 AM EST: : Error: Could not switch to 'Promot As' ID. Promotion Failed. Cause This error is due to the fact that there is no ID file attached to the promotion path document in the Promote As area or, if that area is using a stored ID, there is no ID file attached to the stored ID document. This could be due to forgetting to attach the ID file, in which case simply attach the appropriate ID to the appropriate document. It could also be due to attempting to attach an ID to the appropriate document while signed in on a Notes R 6.5.4 client. The method we use to attach IDs to documents so that you cannot get to them is not supported in the R 6.5.4 client. Promoting Database with Design Notes Still Checked Out in CIAO! Sample Log 02/06/2007 03:57:23 PM EST: : Error: CIAO!: Some design notes are still checked out. You must check in all design notes before performing that action. 02/06/2007 03:57:24 PM EST: : Action Failed: actMAKEVERSION 02/06/2007 03:57:24 PM EST: : Promotion failed. Cause There are some design elements still checked out in Teamstudio CIAO. Go back to the Teamstudio CIAO UI and check all design elements in.","title":"Common Error Messages"},{"location":"errors/#common-error-messages","text":"This section covers the causes of some common errors in the Build Manager promotion log.","title":"Common Error Messages"},{"location":"errors/#your-address-book-does-not-contain-any-cross-certificates-capable-of-authenticating-the-server","text":"","title":"Your Address Book does not contain any cross certificates capable of authenticating the server"},{"location":"errors/#sample-log","text":"11/03/2006 05:06:49 PM EST: : Calling sign utility... 11/03/2006 05:06:51 PM EST: : Error: Your Address Book does not contain any cross certificates capable of authenticating the server. 11/03/2006 05:06:51 PM EST: : Action Failed: actSIGN","title":"Sample Log"},{"location":"errors/#cause","text":"The signing utility in Build Manager is detached to your local data directory to run. This error indicates that the ID being used by the signing utility does not have a cross certificate in your local name and address book for the server where the promotion was targeted. Have your administrator create a cross certificate in your local name and address book.","title":"Cause"},{"location":"errors/#unable-to-find-path-to-server","text":"","title":"Unable to find path to server"},{"location":"errors/#sample-log_1","text":"11/03/2006 04:22:22 PM EST: : Calling sign utility... 11/03/2006 04:22:29 PM EST: : Error: Unable to find path to server 11/03/2006 04:22:29 PM EST: : Action Failed: actSIGN","title":"Sample Log"},{"location":"errors/#cause_1","text":"The signing utility in Build Manager is detached to your local data directory to run. This error indicates that the ID being used by the signing utility cannot find the correct connection document for the target promotion server in your local name and address book. This is exacerbated by the fact there could be multiple local name and address books. Have your administrator create the correct connection documents in all of your local name and address books. Or, use your standard Notes client for promotions.","title":"Cause"},{"location":"errors/#you-are-not-authorized-to-promote-database","text":"","title":"You are not authorized to promote database"},{"location":"errors/#sample-log_2","text":"11/03/2006 03:17:28 PM EST: : You are not authorized to promote this database with the selected promotion path. 11/03/2006 03:17:28 PM EST: : Promotion failed.","title":"Sample Log"},{"location":"errors/#cause_2","text":"The ID you have used to sign onto the Notes client is not present in the promote authority field on the promotion path document in Build Manager for the database you are attempting to promote. This field is checked to see if you have rights to press the promote button for this database. This field supports groups. Have your administrator add your name explicitly to the promotion authority field or to one of the groups (in the domino directory) that are present in the promote authority field on the stored server document for the promotion target server.","title":"Cause"},{"location":"errors/#database-properties-could-not-be-set","text":"","title":"Database properties could not be set"},{"location":"errors/#sample-log_3","text":"11/03/2006 03:43:42 PM EST: : Set Database inherit from to: 11/03/2006 03:43:42 PM EST: : Database properties could not be set. Most likely cause is that the master template name was already in use. Check the log.nsf database on the destination server. 11/03/2006 03:43:42 PM EST: : Action Failed: actDBPROP","title":"Sample Log"},{"location":"errors/#cause_3","text":"There are two potential reasons for this issue. First, the ID being used for changing the database properties in the database properties step does not have permissions on the target server to create master templates. If the promotion path does not switch to another ID to perform the promotion (i.e. Perform Promotion as someone else) then it is the ID you used to sign onto the Notes client. If the promotion path does switch to another ID, then it is the ID used by Build Manager. Have your administrator add the name of the ID being used to the Create master templates field on the target server document in the domino directory or to one of the group documents in the Domino Directory that are already present in the Create master templates field on the target server document in the domino directory. Second, the master template name the program is attempting to implement on the promoted database is already in use. This applies only for Notes 6.x.x servers and above. Investigate where the master template name is currently being used and change it or change the master template name you are currently attempting to implement.","title":"Cause"},{"location":"errors/#ciao-must-be-installed-to-use-this-feature","text":"","title":"CIAO must be installed to use this feature"},{"location":"errors/#sample-log_4","text":"10/04/2006 03:22:01 PM EDT: : Database copied to : Templates\\Colonypo.ntf On JBXNU01/APPS/SRV/FPLDEV 10/04/2006 03:22:01 PM EDT: : Error: CIAO Must be installed to use this feature. on line 20 in MAKEVERSION 10/04/2006 03:22:01 PM EDT: : Action Failed: actMAKEVERSION","title":"Sample Log"},{"location":"errors/#cause_4","text":"Teamstudio CIAO is not installed or implemented properly on the workstation attempting the promotion. This only happens if there is a make version action in the promotion process. There are multiple reasons for this, the least of which is that CIAO is not installed. If CIAO is not installed, install it or deactivate the Make Version step in the promotion process. If CIAO! is installed and not implemented correctly you should contact Teamstudio support.","title":"Cause"},{"location":"errors/#failed-to-bump-version-number","text":"","title":"Failed to bump version number"},{"location":"errors/#sample-log_5","text":"10/20/2009 11:12:50 AM CDT: The log document does not have any version numbers. using initial values from config document 10/20/2009 11:12:50 AM CDT: WARNING: Version was successful, but failed to bump version number. (@1) 10/20/2009 11:12:50 AM CDT: Action Failed: actMAKEVERSION","title":"Sample Log"},{"location":"errors/#cause_5","text":"The Teamstudio CIAO Log, as defined on the Teamstudio CIAO Configuration document, does not contain any Database Version History for the database being promoted. Open the database in Teamstudio CIAO, and make a version of it.","title":"Cause"},{"location":"errors/#incorrect-stored-or-attached-id-being-used","text":"","title":"Incorrect Stored or Attached ID Being Used"},{"location":"errors/#sample-log_6","text":"10/04/2006 03:29:50 PM EDT: : Found stored id: FPL Template Signer' 10/04/2006 03:29:50 PM EDT: : Error: Type mismatch on line 65 in DETACHID 10/04/2006 03:29:50 PM EDT: : Error: Could not detatch id file 10/04/2006 03:29:50 PM EDT: : Action Failed: actSIGN","title":"Sample Log"},{"location":"errors/#cause_6","text":"This typically indicates that the password entered for the stored or attached ID being used by the signing utility is incorrect. Have your administrator check the signing step in the promotion process being used to see if it is an attached ID or a stored ID and then go to the document for the ID being used and reenter the password.","title":"Cause"},{"location":"errors/#unchanged-documents-being-promoted","text":"","title":"Unchanged Documents Being Promoted"},{"location":"errors/#sample-log_7","text":"10/05/2006 03:41:21 PM EDT: : Calling sign utility... 10/05/2006 03:41:21 PM EDT: : Error: No documents have been modified since specified time. 10/05/2006 03:41:21 PM EDT: : Action Failed: actSIGN 10/05/2006 03:41:21 PM EDT: : Promo","title":"Sample Log"},{"location":"errors/#cause_7","text":"You are attempting to promote documents that have not changed since the last promotion.","title":"Cause"},{"location":"errors/#no-id-file-attached","text":"","title":"No ID File Attached"},{"location":"errors/#sample-log_8","text":"01/17/2007 10:54:06 AM EST: : Found stored id: Test ID' 01/17/2007 10:54:06 AM EST: : Error: Type mismatch on line 65 in DETACHID 01/17/2007 10:54:06 AM EST: : Error: Could not detatch id file 01/17/2007 10:54:06 AM EST: : Error: Could not switch to 'Promot As' ID. Promotion Failed.","title":"Sample Log"},{"location":"errors/#cause_8","text":"This error is due to the fact that there is no ID file attached to the promotion path document in the Promote As area or, if that area is using a stored ID, there is no ID file attached to the stored ID document. This could be due to forgetting to attach the ID file, in which case simply attach the appropriate ID to the appropriate document. It could also be due to attempting to attach an ID to the appropriate document while signed in on a Notes R 6.5.4 client. The method we use to attach IDs to documents so that you cannot get to them is not supported in the R 6.5.4 client.","title":"Cause"},{"location":"errors/#promoting-database-with-design-notes-still-checked-out-in-ciao","text":"","title":"Promoting Database with Design Notes Still Checked Out in CIAO!"},{"location":"errors/#sample-log_9","text":"02/06/2007 03:57:23 PM EST: : Error: CIAO!: Some design notes are still checked out. You must check in all design notes before performing that action. 02/06/2007 03:57:24 PM EST: : Action Failed: actMAKEVERSION 02/06/2007 03:57:24 PM EST: : Promotion failed.","title":"Sample Log"},{"location":"errors/#cause_9","text":"There are some design elements still checked out in Teamstudio CIAO. Go back to the Teamstudio CIAO UI and check all design elements in.","title":"Cause"},{"location":"installdb/","text":"Configuration Database If you are not using CIAO!, create the Build Manager database from the supplied template. If you are an existing Teamstudio CIAO! User, ensure that you have upgraded to Version 30 or above and that the CIAO! and Build Manager configuration databases are the same. Go to CIAO Config and make a copy as a backup then refresh the CIAO Config design with Build Manager template. Sign it and test usual CIAO operations work. The suggested basic ACL for each instance of the Build Manager database is Name Type Access Roles Permissions -Default- Unspecified No Access None None Anonymous Unspecified No Access None None BM_ADMINISTRATOR Person Group Manager IDADMIN, DATABASEADMIN, ADMIN, DELETEADMIN All BM_PATHBUILDER Person Group Editor DATABASEADMIN, ADMIN, DELETEADMIN Default for editor, without delete BM_PROMOTER Person Group Author FilteredUser Default for author but with create documents BM_APPROVER (Optional) Person Group Author FilteredUser Default for author but with create documents LocalDomainServers Server Group Manager IDADMIN, DATABASEADMIN, ADMIN, DELETEADMIN All Note that the names of the BM_ADMINISTRATOR, BM_PATHBUILDER, BM_PROMOTER and BM_APPROVER groups are just for illustration in the above table, and can be named as desired. All promotion IDs and Signing IDs should have at least promoter access.","title":"Configuration Database"},{"location":"installdb/#configuration-database","text":"If you are not using CIAO!, create the Build Manager database from the supplied template. If you are an existing Teamstudio CIAO! User, ensure that you have upgraded to Version 30 or above and that the CIAO! and Build Manager configuration databases are the same. Go to CIAO Config and make a copy as a backup then refresh the CIAO Config design with Build Manager template. Sign it and test usual CIAO operations work. The suggested basic ACL for each instance of the Build Manager database is Name Type Access Roles Permissions -Default- Unspecified No Access None None Anonymous Unspecified No Access None None BM_ADMINISTRATOR Person Group Manager IDADMIN, DATABASEADMIN, ADMIN, DELETEADMIN All BM_PATHBUILDER Person Group Editor DATABASEADMIN, ADMIN, DELETEADMIN Default for editor, without delete BM_PROMOTER Person Group Author FilteredUser Default for author but with create documents BM_APPROVER (Optional) Person Group Author FilteredUser Default for author but with create documents LocalDomainServers Server Group Manager IDADMIN, DATABASEADMIN, ADMIN, DELETEADMIN All Note that the names of the BM_ADMINISTRATOR, BM_PATHBUILDER, BM_PROMOTER and BM_APPROVER groups are just for illustration in the above table, and can be named as desired. All promotion IDs and Signing IDs should have at least promoter access.","title":"Configuration Database"},{"location":"installplugin/","text":"Status Plugin When using Build Manager with IBM Notes 8.5.1 and later, users can install and use a status plugin that displays the output of promotions running in the background. Summary status is displayed in the upper pane, and detailed output from the promotion is displayed in the lower pane. You can double-click entries in the Promotions box in the upper right-hand corner to view the traditional Build Manager log once the promotion has completed. Installing the Plugin You install the plugin on each Notes client installation where it will be used. To install the plug-in, click Actions|Install Status Plugin You will be prompted to confirm this action, and warned that Notes must restart to complete the installation. After restart, the new Composite Application window that contains the plugin will be launched. You may close this window. The installation is complete. Once the plugin is installed, whenever a promotion is initiated, the Composite Application window will automatically open to display promotion status. Once the promotion has moved to the background process, you can navigate away from this window and continue to work in Notes. If you choose not to install this plugin, cannot install it due to policies, or are running an earlier version of Notes, a shell window will open when the promotion switches to the background process, and output will be directed to the window. You can continue to work in Notes while the promotion runs in the background, but should not close this window while the promotion is active. If the window is minimized or hidden, it will flash its title bar and icon on the Windows taskbar when the promotion is complete. Disabling the Plugin Build Manager launches the plugin based on the existence of a notes.ini setting that is set by the plugin when it has been loaded successfully. You can disable the plugin by removing the notes.ini setting $TMSBuildManagerPluginVersion . You can remove or disable the plugin in the standard manner via the Application Management wizard in the client.","title":"Status Plugin"},{"location":"installplugin/#status-plugin","text":"When using Build Manager with IBM Notes 8.5.1 and later, users can install and use a status plugin that displays the output of promotions running in the background. Summary status is displayed in the upper pane, and detailed output from the promotion is displayed in the lower pane. You can double-click entries in the Promotions box in the upper right-hand corner to view the traditional Build Manager log once the promotion has completed.","title":"Status Plugin"},{"location":"installplugin/#installing-the-plugin","text":"You install the plugin on each Notes client installation where it will be used. To install the plug-in, click Actions|Install Status Plugin You will be prompted to confirm this action, and warned that Notes must restart to complete the installation. After restart, the new Composite Application window that contains the plugin will be launched. You may close this window. The installation is complete. Once the plugin is installed, whenever a promotion is initiated, the Composite Application window will automatically open to display promotion status. Once the promotion has moved to the background process, you can navigate away from this window and continue to work in Notes. If you choose not to install this plugin, cannot install it due to policies, or are running an earlier version of Notes, a shell window will open when the promotion switches to the background process, and output will be directed to the window. You can continue to work in Notes while the promotion runs in the background, but should not close this window while the promotion is active. If the window is minimized or hidden, it will flash its title bar and icon on the Windows taskbar when the promotion is complete.","title":"Installing the Plugin"},{"location":"installplugin/#disabling-the-plugin","text":"Build Manager launches the plugin based on the existence of a notes.ini setting that is set by the plugin when it has been loaded successfully. You can disable the plugin by removing the notes.ini setting $TMSBuildManagerPluginVersion . You can remove or disable the plugin in the standard manner via the Application Management wizard in the client.","title":"Disabling the Plugin"},{"location":"installtr/","text":"Template Registry Installing and Configuring the Template Registry Database Create a database called TemplateRegistry.nsf using TemplateRegistry.ntf as the master design. For the Template Registry the suggested default ACL is: Name Type Access Roles Permissions -Default- Unspecified No Access None None Anonymous Unspecified No Access None None BM_ADMINISTRATOR Person Group Manager AddTemplateEnvs, AdminEnvs, AdminExtract, AdminProfs, RmvTemplateEnvs All BM_PROMOTER Person Group Author AddTemplateEnvs, RmvTempalteEnvs Default for author with create documents LocalDomainServers Server Group Manager AddTemplateEnvs, AdminEnvs, AdminExtract, AdminProfs, RmvTemplateEnvs All Note There are no approver or path builder groups in this ACL. This is because only administrators and promoters need access to the functionality. If Build Manager path builders need the ability to promote databases, then these groups should be added with the same rights as the promoters. Setting up the Default Registry Open the Template Registry database. In the Admin tab, expand Configuration and click on Registry Settings . For basic setup and initial testing, fill out the tabs as follows. General Leave the * to indicate any Build Manager can access this Template Registry Default Target Environment Enter an Environment name and a description. This will be the default Environment for promotions to the Template Registry. For instance, this can be a catch all for any development. So name it Developed \u2013 Ready for Test and add a description if required. In the Advanced options, leave the * to allow any Build Manager to promote from here, (leave the box unchecked). Target Environments Save and reopen this document and the Default Environment will be listed. Other logical environments can be created from here, for example; QA Approved , UAT Complete , etc. They will all be listed here. See Creating Additional Repository Environments below. Approvals This is only to be completed if approvals are required to update the versioned templates in the repository to the next stage. See Workflow Approvals for details on configuring this tab. Save and close the document. Creating Additional Repository Environments From the Admin tab click on Environments (or if currently setting up the Default Environment, go to the Target Environments tab) and click Create Environment from the toolbar. Fill in the basic details. The security setting Allow templates to be approved on Build should be checked as default. Ignore the Require Template Profile . The Build Manager Promotion access field allows restrictions as to which instance of BM can pull templates from this registry environment. In the Approvals tab, only check the box if movements in the Template Registry are required to be authorized.","title":"Template Registry"},{"location":"installtr/#template-registry","text":"","title":"Template Registry"},{"location":"installtr/#installing-and-configuring-the-template-registry-database","text":"Create a database called TemplateRegistry.nsf using TemplateRegistry.ntf as the master design. For the Template Registry the suggested default ACL is: Name Type Access Roles Permissions -Default- Unspecified No Access None None Anonymous Unspecified No Access None None BM_ADMINISTRATOR Person Group Manager AddTemplateEnvs, AdminEnvs, AdminExtract, AdminProfs, RmvTemplateEnvs All BM_PROMOTER Person Group Author AddTemplateEnvs, RmvTempalteEnvs Default for author with create documents LocalDomainServers Server Group Manager AddTemplateEnvs, AdminEnvs, AdminExtract, AdminProfs, RmvTemplateEnvs All Note There are no approver or path builder groups in this ACL. This is because only administrators and promoters need access to the functionality. If Build Manager path builders need the ability to promote databases, then these groups should be added with the same rights as the promoters.","title":"Installing and Configuring the Template Registry Database"},{"location":"installtr/#setting-up-the-default-registry","text":"Open the Template Registry database. In the Admin tab, expand Configuration and click on Registry Settings . For basic setup and initial testing, fill out the tabs as follows. General Leave the * to indicate any Build Manager can access this Template Registry Default Target Environment Enter an Environment name and a description. This will be the default Environment for promotions to the Template Registry. For instance, this can be a catch all for any development. So name it Developed \u2013 Ready for Test and add a description if required. In the Advanced options, leave the * to allow any Build Manager to promote from here, (leave the box unchecked). Target Environments Save and reopen this document and the Default Environment will be listed. Other logical environments can be created from here, for example; QA Approved , UAT Complete , etc. They will all be listed here. See Creating Additional Repository Environments below. Approvals This is only to be completed if approvals are required to update the versioned templates in the repository to the next stage. See Workflow Approvals for details on configuring this tab. Save and close the document.","title":"Setting up the Default Registry"},{"location":"installtr/#creating-additional-repository-environments","text":"From the Admin tab click on Environments (or if currently setting up the Default Environment, go to the Target Environments tab) and click Create Environment from the toolbar. Fill in the basic details. The security setting Allow templates to be approved on Build should be checked as default. Ignore the Require Template Profile . The Build Manager Promotion access field allows restrictions as to which instance of BM can pull templates from this registry environment. In the Approvals tab, only check the box if movements in the Template Registry are required to be authorized.","title":"Creating Additional Repository Environments"},{"location":"installwa/","text":"Workflow Approvals Installing and Configuring the Workflow Approvals Database Creating a Workflow Database Create a database called TeamstudioWorkflow.nsf using Workflow.ntf as the master template. This will need to reside on a server with access to send email. Open the new TeamstudioWorkflow.nsf and choose Actions|Admin|Create Workflow Definitions from the menu. This will create the new default workflow documents as below. Make sure any approvers have at least Author access to the TeamstudioWorkflow.nsf database. Close TeamstudioWorkflow.nsf. Configure Workflow in Build Manager Open the Build Manager instance. Click the Build Manager button on the toolbar and go to Settings . Fill in the Workflow Definition Database section and the Workflow instance/Log Database with the details of the location/name of your workflow database. It is important to set the Workflow Category to Build Manager . From the Workflow Category dropdown select Build Manager . You may now click ok and repeat with any other Build Manager instances you require to work with the Workflow database that you've created. Configure Workflow in Template Registry You will also need to configure any Template Registry instances where you want to use Workflow Approvals to use the new workflow database. Similar to what you did with the Build Manager instances, you need to configure Template Registry with the location and Workflow category settings as follows. Open the Template Registry instance. Under the Admin menu on the left pane, select Configuration|Registry Settings . The Registry Settings page will open, where you now need to select the 4th tab Approvals . Fill in the Workflow Definition Database section and the Workflow instance/Log Database with the details of the location/name of your workflow database. You may also enable the checkbox to use the definition database . As with the Build Manager instance, it is important to set the Workflow Category , but this time to Template Registry . From the Workflow Category dropdown select Template Registry . You may now close and save the document.","title":"Workflow Approvals"},{"location":"installwa/#workflow-approvals","text":"","title":"Workflow Approvals"},{"location":"installwa/#installing-and-configuring-the-workflow-approvals-database","text":"","title":"Installing and Configuring the Workflow Approvals Database"},{"location":"installwa/#creating-a-workflow-database","text":"Create a database called TeamstudioWorkflow.nsf using Workflow.ntf as the master template. This will need to reside on a server with access to send email. Open the new TeamstudioWorkflow.nsf and choose Actions|Admin|Create Workflow Definitions from the menu. This will create the new default workflow documents as below. Make sure any approvers have at least Author access to the TeamstudioWorkflow.nsf database. Close TeamstudioWorkflow.nsf.","title":"Creating a Workflow Database"},{"location":"installwa/#configure-workflow-in-build-manager","text":"Open the Build Manager instance. Click the Build Manager button on the toolbar and go to Settings . Fill in the Workflow Definition Database section and the Workflow instance/Log Database with the details of the location/name of your workflow database. It is important to set the Workflow Category to Build Manager . From the Workflow Category dropdown select Build Manager . You may now click ok and repeat with any other Build Manager instances you require to work with the Workflow database that you've created.","title":"Configure Workflow in Build Manager"},{"location":"installwa/#configure-workflow-in-template-registry","text":"You will also need to configure any Template Registry instances where you want to use Workflow Approvals to use the new workflow database. Similar to what you did with the Build Manager instances, you need to configure Template Registry with the location and Workflow category settings as follows. Open the Template Registry instance. Under the Admin menu on the left pane, select Configuration|Registry Settings . The Registry Settings page will open, where you now need to select the 4th tab Approvals . Fill in the Workflow Definition Database section and the Workflow instance/Log Database with the details of the location/name of your workflow database. You may also enable the checkbox to use the definition database . As with the Build Manager instance, it is important to set the Workflow Category , but this time to Template Registry . From the Workflow Category dropdown select Template Registry . You may now close and save the document.","title":"Configure Workflow in Template Registry"},{"location":"intro/","text":"Introduction Build Manager is a tool for the comprehensive control of the movement of Notes database templates from one environment to another. It improves efficiency by automating the steps necessary to make a template ready for the next environment. It mitigates risk by ensuring all necessary steps are completed as specified, thus reducing the risk of human error. Finally it assists with compliance to regulatory standards by ensuring the enforcement of segregation of roles- all at the push of a single button! Welcome to the world of One-Click Builds. Fundamentally, there are two ways to utilize Build Manager A push model, maybe similar to automating a manual process that you currently perform. A push/pull model using a storage facility called the Template Registry . The following sections describe the two main ways Build Manager can be configured. You or your administrator will have set up one of the two methodologies ready for you to start executing automated builds of your applications. Using the features of Build Manager in either methodology is similar, the difference being where you are promoting databases to and from. Note The following topologies represent a classical 3-Tier environment. These are logical environments, not physical (i.e. it does not matter if all three environments are on the same machine, separate machines or even in different domains). If you have more that three tiers, for instance a UAT or Staging tier (or both) you can extrapolate these ideas by assuming the Test environment may be duplicated and configured to fit the needs of your current topology. Push Model Build Manager can be utilized to replace any manual Build Process currently in place. As part of promoting databases from one environment to another, for example from Dev to Test, various actions can be performed against the code and the database properties. This all occurs automatically and is configured by the Build Manager administrator. Developers complete work on their designs and promote ( push ) to Test. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Testers can then perform the testing required and then once completed can then promote to Production. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. If configured, the system is paused and a promotion request email is sent to an approver. An email will be sent to the promoter to notify if and when the approval is given. The promoter can then continue to move the database to the required environment. Note Email authorization can occur at any or all the number steps if desired e.g. from development to test. Push/Pull Model using the Template Registry The other way that Build Manager can be used is to incorporate a push/pull model. Rather than the databases always being pushed from one environment to the next an optional component, the Template Registry , allows developers to perform continuous builds while other individuals can then choose which versions and when to promote databases to another environment. There are two main advantages using this method No accidental overwriting of databases. All databases are stored in the Template Registry so authorized users of other environments, for example Test, can pull down designs when they need to as opposed to developers pushing databases onto Test servers and then refreshing the design causing the current database to be overwritten, maybe part way through testing. Faster rollback - The Template Registry contains complete versions of your designs, and they are flagged as being completed for a particular stage in your development process, for example, Tested, ready for production . If a version of the database gets to production that, unfortunately contains a bug and rollback is required, an administrator can simply select the previous working version from the Template Registry and perform the promotion ( pulling ) to production on this earlier version The following topology is a logical representation of a 3 tiered environment (Dev, Test and Production) with Teamstudio Build Manager implemented. The Template Registry usually resides on the Development Server. Developers can complete work and promote ( push ) up to a repository, versioning as they do so, allowing the most up to date versions of their designs to be eligible for testing. Developers can develop in either NTF or NSF format and can push versions into the Template Registry as often as they like. Some or all of the processes described in the \u2018Build Steps\u2019 section below have been configured to be automated by the Build Manager administrator. Note The promotion of the DB to the Template Registry, if configured, can automatically rename NSFs to the NTFs. Once in the Registry, the test team can pull versions down to the Test Servers and commence testing. Versions of the templates may be chosen manually at promotion time or the latest template will be moved to the Test environment. This is configured by the Build Manager administrator. This allows testing to be independent and not rely on developers pushing updated dbs/templates direct to the Test Server overwriting templates already under test. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Once tested, the template can be approved from Developed \u2013 Ready For Test to Tested - Ready for Production within the Repository. The Template can be pulled down from the Template Registry to Production by an authorized user. If configured, the system is paused and email verification is sent to an approver. An email will be sent to the promoter to notify if and when the approval is given. The promoter can then continue to move the database to the required environment. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Note Email authorization can occur at any or all the number steps if desired e.g. from development to test. Note If required the DB refresh of design will occur on a promotion if necessary. The Build Manager Administrator will configure this. Note Rollback can be expedited almost immediately. As prior versions of the template are stored in the Repository, if a new released version has a showstopper bug that requires rollback, an earlier version from the Repository can be selected to be pulled to the Production server. Any authorization required for promoting to a Production Server will still be enforced.","title":"Introduction"},{"location":"intro/#introduction","text":"Build Manager is a tool for the comprehensive control of the movement of Notes database templates from one environment to another. It improves efficiency by automating the steps necessary to make a template ready for the next environment. It mitigates risk by ensuring all necessary steps are completed as specified, thus reducing the risk of human error. Finally it assists with compliance to regulatory standards by ensuring the enforcement of segregation of roles- all at the push of a single button! Welcome to the world of One-Click Builds. Fundamentally, there are two ways to utilize Build Manager A push model, maybe similar to automating a manual process that you currently perform. A push/pull model using a storage facility called the Template Registry . The following sections describe the two main ways Build Manager can be configured. You or your administrator will have set up one of the two methodologies ready for you to start executing automated builds of your applications. Using the features of Build Manager in either methodology is similar, the difference being where you are promoting databases to and from. Note The following topologies represent a classical 3-Tier environment. These are logical environments, not physical (i.e. it does not matter if all three environments are on the same machine, separate machines or even in different domains). If you have more that three tiers, for instance a UAT or Staging tier (or both) you can extrapolate these ideas by assuming the Test environment may be duplicated and configured to fit the needs of your current topology.","title":"Introduction"},{"location":"intro/#push-model","text":"Build Manager can be utilized to replace any manual Build Process currently in place. As part of promoting databases from one environment to another, for example from Dev to Test, various actions can be performed against the code and the database properties. This all occurs automatically and is configured by the Build Manager administrator. Developers complete work on their designs and promote ( push ) to Test. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Testers can then perform the testing required and then once completed can then promote to Production. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. If configured, the system is paused and a promotion request email is sent to an approver. An email will be sent to the promoter to notify if and when the approval is given. The promoter can then continue to move the database to the required environment. Note Email authorization can occur at any or all the number steps if desired e.g. from development to test.","title":"Push Model"},{"location":"intro/#pushpull-model-using-the-template-registry","text":"The other way that Build Manager can be used is to incorporate a push/pull model. Rather than the databases always being pushed from one environment to the next an optional component, the Template Registry , allows developers to perform continuous builds while other individuals can then choose which versions and when to promote databases to another environment. There are two main advantages using this method No accidental overwriting of databases. All databases are stored in the Template Registry so authorized users of other environments, for example Test, can pull down designs when they need to as opposed to developers pushing databases onto Test servers and then refreshing the design causing the current database to be overwritten, maybe part way through testing. Faster rollback - The Template Registry contains complete versions of your designs, and they are flagged as being completed for a particular stage in your development process, for example, Tested, ready for production . If a version of the database gets to production that, unfortunately contains a bug and rollback is required, an administrator can simply select the previous working version from the Template Registry and perform the promotion ( pulling ) to production on this earlier version The following topology is a logical representation of a 3 tiered environment (Dev, Test and Production) with Teamstudio Build Manager implemented. The Template Registry usually resides on the Development Server. Developers can complete work and promote ( push ) up to a repository, versioning as they do so, allowing the most up to date versions of their designs to be eligible for testing. Developers can develop in either NTF or NSF format and can push versions into the Template Registry as often as they like. Some or all of the processes described in the \u2018Build Steps\u2019 section below have been configured to be automated by the Build Manager administrator. Note The promotion of the DB to the Template Registry, if configured, can automatically rename NSFs to the NTFs. Once in the Registry, the test team can pull versions down to the Test Servers and commence testing. Versions of the templates may be chosen manually at promotion time or the latest template will be moved to the Test environment. This is configured by the Build Manager administrator. This allows testing to be independent and not rely on developers pushing updated dbs/templates direct to the Test Server overwriting templates already under test. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Once tested, the template can be approved from Developed \u2013 Ready For Test to Tested - Ready for Production within the Repository. The Template can be pulled down from the Template Registry to Production by an authorized user. If configured, the system is paused and email verification is sent to an approver. An email will be sent to the promoter to notify if and when the approval is given. The promoter can then continue to move the database to the required environment. Some or all of the processes described in the Build Steps section below have been configured to be automated by the Build Manager administrator. Note Email authorization can occur at any or all the number steps if desired e.g. from development to test. Note If required the DB refresh of design will occur on a promotion if necessary. The Build Manager Administrator will configure this. Note Rollback can be expedited almost immediately. As prior versions of the template are stored in the Repository, if a new released version has a showstopper bug that requires rollback, an earlier version from the Repository can be selected to be pulled to the Production server. Any authorization required for promoting to a Production Server will still be enforced.","title":"Push/Pull Model using the Template Registry"},{"location":"modify/","text":"Modify-Only Builds Modified-Only builds help reduce the impact of design refreshes on production servers and subsequent replication of updated databases, while allowing good-practice use of Sign and Compile steps. Note This feature requires careful planning and precise configuration to be effective, and may not be desired for most applications. However, large applications (with many views, or many images), and applications with remote users with low bandwidth connections will benefit from this feature. When this feature is not enabled, databases are copied in the same manner as previous versions of Build Manager. This feature can only be enabled for builds to a Template Registry database, and can be enabled on the Build Path Behavior When Copy Modified Elements Only is selected On the first build, the entire database is copied and stored in the Template Registry, along with timestamps that can be used in future builds to limit updates to modified elements. On subsequent builds, the following occurs The prior version from the Template Registry is extracted to a temporary file, along with the timestamps collected when it was created. The timestamps are used to query the source template and copy only the elements that have been modified in the source since the last build. A timestamp for the temporary file is passed on to any Sign and Compile steps in the promotion, allowing them to act on only those elements copied in or otherwise modified during the promotion (e.g. due to enabling agents, setting element properties, etc). Signing and Compiling The Compile step builds a list of elements dependent on any LotusScript Script Libraries that were copied or modified since the copy operation, and compiles them all in the order of dependency. Consequently, more elements than modified in the source may be compiled and modifying libraries used by many elements (e.g., all views) may have drastic effect. Dependencies can only be detected for elements that explicitly contain a Use statement for another element higher in the dependency list. The Sign step will act on any modified documents since the copy operation, including all newly compiled elements. Implications Changing the source, for example, recompiling all LotusScript or replacing the source template with a copy, can significantly affect what gets copied. When replacing the source template with a new copy, you should disable Modified-Only for a single promotion as it will guarantee a good baseline copy. Because the new copy is based on the prior version from the Template Registry, elements not modified in the source won\u2019t be copied, which can have side effects. For example, if a Search and Replace step replaces a tag in a subform with the current version number, this will only occur when the subform is modified in the source. When it has not been modified, it will still have the version number it got when it was last updated. To address this issue, list elements in the Force Copy field on the Build Path to ensure they are always copied and updated. Because Modified-Only builds can only be used going into a Template Registry, running a Sign or Compile step on the promotion out of the Template Registry will affect all elements, and undo the benefits of using Modified-Only. To avoid this, Sign, Compile, and otherwise configure the template for the target environment on the build into the Template Registry. You can perform a Modified-Only build from one Registry target to another. For example, you can use the first Modified-Only build to configure the template for a QA environment, and use a subsequent Modified-Only build to pull from that Registry and configure the template for Production while building to another Registry target.","title":"Modify-Only Builds"},{"location":"modify/#modify-only-builds","text":"Modified-Only builds help reduce the impact of design refreshes on production servers and subsequent replication of updated databases, while allowing good-practice use of Sign and Compile steps. Note This feature requires careful planning and precise configuration to be effective, and may not be desired for most applications. However, large applications (with many views, or many images), and applications with remote users with low bandwidth connections will benefit from this feature. When this feature is not enabled, databases are copied in the same manner as previous versions of Build Manager. This feature can only be enabled for builds to a Template Registry database, and can be enabled on the Build Path","title":"Modify-Only Builds"},{"location":"modify/#behavior","text":"When Copy Modified Elements Only is selected On the first build, the entire database is copied and stored in the Template Registry, along with timestamps that can be used in future builds to limit updates to modified elements. On subsequent builds, the following occurs The prior version from the Template Registry is extracted to a temporary file, along with the timestamps collected when it was created. The timestamps are used to query the source template and copy only the elements that have been modified in the source since the last build. A timestamp for the temporary file is passed on to any Sign and Compile steps in the promotion, allowing them to act on only those elements copied in or otherwise modified during the promotion (e.g. due to enabling agents, setting element properties, etc).","title":"Behavior"},{"location":"modify/#signing-and-compiling","text":"The Compile step builds a list of elements dependent on any LotusScript Script Libraries that were copied or modified since the copy operation, and compiles them all in the order of dependency. Consequently, more elements than modified in the source may be compiled and modifying libraries used by many elements (e.g., all views) may have drastic effect. Dependencies can only be detected for elements that explicitly contain a Use statement for another element higher in the dependency list. The Sign step will act on any modified documents since the copy operation, including all newly compiled elements.","title":"Signing and Compiling"},{"location":"modify/#implications","text":"Changing the source, for example, recompiling all LotusScript or replacing the source template with a copy, can significantly affect what gets copied. When replacing the source template with a new copy, you should disable Modified-Only for a single promotion as it will guarantee a good baseline copy. Because the new copy is based on the prior version from the Template Registry, elements not modified in the source won\u2019t be copied, which can have side effects. For example, if a Search and Replace step replaces a tag in a subform with the current version number, this will only occur when the subform is modified in the source. When it has not been modified, it will still have the version number it got when it was last updated. To address this issue, list elements in the Force Copy field on the Build Path to ensure they are always copied and updated. Because Modified-Only builds can only be used going into a Template Registry, running a Sign or Compile step on the promotion out of the Template Registry will affect all elements, and undo the benefits of using Modified-Only. To avoid this, Sign, Compile, and otherwise configure the template for the target environment on the build into the Template Registry. You can perform a Modified-Only build from one Registry target to another. For example, you can use the first Modified-Only build to configure the template for a QA environment, and use a subsequent Modified-Only build to pull from that Registry and configure the template for Production while building to another Registry target.","title":"Implications"},{"location":"ppcreate/","text":"Creating a Promotion Path Build Manager can promote templates to two types of targets. Promotion Paths are used to Promote a template to a server and file path, and are used to move templates into new environments for deployment. Build Paths create a build (version) of a template in a Template Registry, as part of a release control process. Templates in a Template Registry can later be deployed to environments using Promotion Paths. This help topic covers creating a Promotion Path. For information on Build Paths, see Creating a Build Path Promotion Paths specify a server and path where an application template can be promoted. You can create multiple promotion paths for each of your watched databases. To configure a promotion path document, you create and name the promotion path, enter the copy settings, and select the promotion options. Build steps can be created as child documents for the promotion path, to enable additional build steps. To Create and Name a Promotion Path From the CIAO Config database, select the database document you want to create a promotion path for. From the Create menu, click Promotion Path . You see the Promotion Path document. Select Yes beside the Active field, if not already selected. In the Description field, enter a name describing the promotion path, for example, Dev>QA . This field cannot be blank and must be unique. If the source is a template stored in a Template Registry The Registry Settings pane is displayed. Select the Version Options setting that should be used to determine the build to be promoted. Optionally, configure Deployment Tracking . The choice of Template Registry and Template are determined by the settings of the parent Database document. To configure the copy settings for the promotion path You can configure the copy settings for the promotion path as follows. 1. From the Promotion Path document, select the Basics tab. 2. In the Promote to Server field, select the server you want to promote the database to. This field cannot be blank. 3. In the Promote to Path field, enter the path where the database should be promoted. This field must be relative to the data directory on the destination server. Leave this field blank to specify the data directory itself. If you omit the database name, the current name is used. The blue percent sign (%) at the top of the page indicates that you can use replacement macros in this field. Click the blue percent sign to view all options. A grey percent sign at the top of the page indicates that you cannot use macros in the selected field. 4. Enter a Notes selection formula in the Copy Documents field (for example, SELECT @ALL ) if you have documents that must stay with the database or template. 5. To overwrite old copies of the file being promoted, ensure the Overwrite field is checked. Unchecking this setting causes the promotion to fail if the target database already exists. To limit which users can run a Promotion List users who are allowed to run the promotion on the Authority & IDs tab. To run the promotion as an alternate ID Select an ID to use on the Authority & IDs tab. To configure Promotion Path options You can configure the promotion options of the promotion path as follows. To prompt the person promoting the database to enter a Promotion Comment during promotion, check Prompt for Comments . To require the comment, also check Comment Required . In the Notify on failure field, browse to select names from one or more address books to designate who to e-mail upon failure of a promotion. The promoter (the person who clicks the Promote button) is always notified with a status window at the end of the promotion. To configure CIAO Watch options for the target NTF produced by the promotion CIAO can be configured to enable a CIAO watch on the target of a Promotion From the Promotion Path document, click the Watch Target tab. Select Yes for the Watch New Database field, if you want CIAO to watch the target database. In the Destination Configuration Server field, use the selection button, or enter the name of the server with the configuration database In the Destination Configuration Path field, use the selection button, or enter the path to the configuration database that you want to monitor the promotion template. In the Destination Log Server field, optionally use the selection button, or enter the server name for the log database you want the promoted database to use. In the Destination Log Path field, use the selection button, or enter the path to the log database that you want the promoted database to use. Save and close the document.","title":"Creating a Promotion Path"},{"location":"ppcreate/#creating-a-promotion-path","text":"Build Manager can promote templates to two types of targets. Promotion Paths are used to Promote a template to a server and file path, and are used to move templates into new environments for deployment. Build Paths create a build (version) of a template in a Template Registry, as part of a release control process. Templates in a Template Registry can later be deployed to environments using Promotion Paths. This help topic covers creating a Promotion Path. For information on Build Paths, see Creating a Build Path Promotion Paths specify a server and path where an application template can be promoted. You can create multiple promotion paths for each of your watched databases. To configure a promotion path document, you create and name the promotion path, enter the copy settings, and select the promotion options. Build steps can be created as child documents for the promotion path, to enable additional build steps.","title":"Creating a Promotion Path"},{"location":"ppcreate/#to-create-and-name-a-promotion-path","text":"From the CIAO Config database, select the database document you want to create a promotion path for. From the Create menu, click Promotion Path . You see the Promotion Path document. Select Yes beside the Active field, if not already selected. In the Description field, enter a name describing the promotion path, for example, Dev>QA . This field cannot be blank and must be unique.","title":"To Create and Name a Promotion Path"},{"location":"ppcreate/#if-the-source-is-a-template-stored-in-a-template-registry","text":"The Registry Settings pane is displayed. Select the Version Options setting that should be used to determine the build to be promoted. Optionally, configure Deployment Tracking . The choice of Template Registry and Template are determined by the settings of the parent Database document.","title":"If the source is a template stored in a Template Registry"},{"location":"ppcreate/#to-configure-the-copy-settings-for-the-promotion-path","text":"You can configure the copy settings for the promotion path as follows. 1. From the Promotion Path document, select the Basics tab. 2. In the Promote to Server field, select the server you want to promote the database to. This field cannot be blank. 3. In the Promote to Path field, enter the path where the database should be promoted. This field must be relative to the data directory on the destination server. Leave this field blank to specify the data directory itself. If you omit the database name, the current name is used. The blue percent sign (%) at the top of the page indicates that you can use replacement macros in this field. Click the blue percent sign to view all options. A grey percent sign at the top of the page indicates that you cannot use macros in the selected field. 4. Enter a Notes selection formula in the Copy Documents field (for example, SELECT @ALL ) if you have documents that must stay with the database or template. 5. To overwrite old copies of the file being promoted, ensure the Overwrite field is checked. Unchecking this setting causes the promotion to fail if the target database already exists.","title":"To configure the copy settings for the promotion path"},{"location":"ppcreate/#to-limit-which-users-can-run-a-promotion","text":"List users who are allowed to run the promotion on the Authority & IDs tab.","title":"To limit which users can run a Promotion"},{"location":"ppcreate/#to-run-the-promotion-as-an-alternate-id","text":"Select an ID to use on the Authority & IDs tab.","title":"To run the promotion as an alternate ID"},{"location":"ppcreate/#to-configure-promotion-path-options","text":"You can configure the promotion options of the promotion path as follows. To prompt the person promoting the database to enter a Promotion Comment during promotion, check Prompt for Comments . To require the comment, also check Comment Required . In the Notify on failure field, browse to select names from one or more address books to designate who to e-mail upon failure of a promotion. The promoter (the person who clicks the Promote button) is always notified with a status window at the end of the promotion.","title":"To configure Promotion Path options"},{"location":"ppcreate/#to-configure-ciao-watch-options-for-the-target-ntf-produced-by-the-promotion","text":"CIAO can be configured to enable a CIAO watch on the target of a Promotion From the Promotion Path document, click the Watch Target tab. Select Yes for the Watch New Database field, if you want CIAO to watch the target database. In the Destination Configuration Server field, use the selection button, or enter the name of the server with the configuration database In the Destination Configuration Path field, use the selection button, or enter the path to the configuration database that you want to monitor the promotion template. In the Destination Log Server field, optionally use the selection button, or enter the server name for the log database you want the promoted database to use. In the Destination Log Path field, use the selection button, or enter the path to the log database that you want the promoted database to use. Save and close the document.","title":"To configure CIAO Watch options for the target NTF produced by the promotion"},{"location":"projectbuild/","text":"Project Builds A Project Build specifies multiple Promotion Paths and allows them to be run in order, with a single click. To create a project build, navigate to the Paths|Project Builds view. Click New Project Build to create a Project Build. Set the Description field, and click Add to select the Promotion Paths the Project Build should include. Order the Promotion Paths in the order they should run. Optionally, select Continue with next promotion after failure if additional promotions should continue to run after one of the promotions fails. Save the Project Build. To run a Project Build, select the promotion in the Project Builds view, and click Promote . The promotions run serially in the order specified. A log is created for the overall Project Build, and a separate log is created for each specific Promotion Path, and can be viewed in the Logs views.","title":"Project Builds"},{"location":"projectbuild/#project-builds","text":"A Project Build specifies multiple Promotion Paths and allows them to be run in order, with a single click. To create a project build, navigate to the Paths|Project Builds view. Click New Project Build to create a Project Build. Set the Description field, and click Add to select the Promotion Paths the Project Build should include. Order the Promotion Paths in the order they should run. Optionally, select Continue with next promotion after failure if additional promotions should continue to run after one of the promotions fails. Save the Project Build. To run a Project Build, select the promotion in the Project Builds view, and click Promote . The promotions run serially in the order specified. A log is created for the overall Project Build, and a separate log is created for each specific Promotion Path, and can be viewed in the Logs views.","title":"Project Builds"},{"location":"promotion/","text":"Promotion Paths Three types of Build Manager documents form the basis for building and promoting databases. Database Documents , also called CIAO! Configuration or Watch documents, define the source location - the source template of an application where development takes place. Promotion Paths define a target location - a server and path where the source template should be copied. Build steps can then be run against this target to prepare it for release. Build Paths , which are identical to Promotion Paths, except that the target they specify is a Template Registry, a database where versions of templates can be stored and tracked. Database Documents The design of Database Documents is largely based on Teamstudio CIAO! Configuration documents that specify how CIAO! should watch (and control access to) a template. When using CIAO!, A Build Manager database can be used in place of a CIAO! configuration, allowing Build Manager to integrate more deeply with CIAO! Teamstudio CIAO! configuration options can be found in the CIAO! documentation, and are identical. Build Manager does not require CIAO! Build Manager uses the Database Document to identify the source template which the build will copy and act on, and can be created * By choosing the Build Manager view menu button and choosing Add Database to add a source template that exists on a server. * By choosing the Build Manager view menu button and choosing Add Template From Registry to add a source template that is stored in a Template Registry. Promotion Paths Promotion Paths specify a target location to promote a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child step to refresh the design of one more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or promoted. To create a Promotion Path, select the Database document that identifies the source template, and choose Create|Promotion Path . Build Paths Build Paths specify a Template Registry as the target for a template. Build paths copy the source template to a temporary local location, and run the child Build Steps against the new copy. The newly built template will then be attached to the specified Template Registry, along with version and build information and other useful metadata. Once template versions have been created in a Template Registry, a new Database Document can be created to allow Promotion Paths to extract those templates into target environments. To create a Build Path, select the Database document that identifies the source template, and choose Create|Build Path . The Template Registry The Template Registry acts as a storage facility that keep each built version of a template in a secure environment that maintains metadata about the version, build number, source template, and so on. Template registries can help with change control efforts, providing roll-back to known good versions without a full restore and rebuild cycle, and tracking of approved target environments for different versions, including Approval Workflows when needed. More information on how Template Registries fit in the Build Manager topology is available here . As of Build Manager 8.0, Build manager can also track deployments and update a custom status value to the Template document in the Template Registry when a version has been deployed to a target environment. More information on Template Registry Deployment Tracking is available here .","title":"Promotion Paths"},{"location":"promotion/#promotion-paths","text":"Three types of Build Manager documents form the basis for building and promoting databases. Database Documents , also called CIAO! Configuration or Watch documents, define the source location - the source template of an application where development takes place. Promotion Paths define a target location - a server and path where the source template should be copied. Build steps can then be run against this target to prepare it for release. Build Paths , which are identical to Promotion Paths, except that the target they specify is a Template Registry, a database where versions of templates can be stored and tracked.","title":"Promotion Paths"},{"location":"promotion/#database-documents","text":"The design of Database Documents is largely based on Teamstudio CIAO! Configuration documents that specify how CIAO! should watch (and control access to) a template. When using CIAO!, A Build Manager database can be used in place of a CIAO! configuration, allowing Build Manager to integrate more deeply with CIAO! Teamstudio CIAO! configuration options can be found in the CIAO! documentation, and are identical. Build Manager does not require CIAO! Build Manager uses the Database Document to identify the source template which the build will copy and act on, and can be created * By choosing the Build Manager view menu button and choosing Add Database to add a source template that exists on a server. * By choosing the Build Manager view menu button and choosing Add Template From Registry to add a source template that is stored in a Template Registry.","title":"Database Documents"},{"location":"promotion/#promotion-paths_1","text":"Promotion Paths specify a target location to promote a template. Promotion paths copy the source template to the target location, and run the child Build Steps against the new copy. Typically, a Promotion Path will include a child step to refresh the design of one more databases in the environment (e.g. QA, UAT, Production) where the template has been copied, or promoted. To create a Promotion Path, select the Database document that identifies the source template, and choose Create|Promotion Path .","title":"Promotion Paths"},{"location":"promotion/#build-paths","text":"Build Paths specify a Template Registry as the target for a template. Build paths copy the source template to a temporary local location, and run the child Build Steps against the new copy. The newly built template will then be attached to the specified Template Registry, along with version and build information and other useful metadata. Once template versions have been created in a Template Registry, a new Database Document can be created to allow Promotion Paths to extract those templates into target environments. To create a Build Path, select the Database document that identifies the source template, and choose Create|Build Path .","title":"Build Paths"},{"location":"promotion/#the-template-registry","text":"The Template Registry acts as a storage facility that keep each built version of a template in a secure environment that maintains metadata about the version, build number, source template, and so on. Template registries can help with change control efforts, providing roll-back to known good versions without a full restore and rebuild cycle, and tracking of approved target environments for different versions, including Approval Workflows when needed. More information on how Template Registries fit in the Build Manager topology is available here . As of Build Manager 8.0, Build manager can also track deployments and update a custom status value to the Template document in the Template Registry when a version has been deployed to a target environment. More information on Template Registry Deployment Tracking is available here .","title":"The Template Registry"},{"location":"refresh/","text":"Refresh/Replace Design Refresh the design of a database or list of databases. Note Certain options available in this step can cause unexpected results. See the Special Options section below to understand how these options differ in behavior from the standard Notes client operations. To Refresh/Replace the Design of a Database Select the Build or Promotion Path that relates to the database or template for which you want to automatically refresh the design. Click the Create action button and select Refresh Design . The Refresh Db Design document appears. Enter a descriptive name in the Description field (for example, Refresh Design List ). Deelect the Promotion fails if no databases were found to refresh option if you are refreshing the design of a group of databases and you do not mind if one (or more) of those databases does not exist For Target Server, select the server on which to refresh databases. If the Build Manager administrator has setup refresh restrictions, this field only lists the target server for the promotion. For mode, select either Refresh design or Replace design . See Special Options below for a detailed explanation of the options available for each setting. In the Set Database Title field, select No Change Retain the current database title Same as Template Use the same title as the template that you are refreshing from Custom Enter the new name In the Databases to Refresh field, enter the path of each database that requires refreshing once the template has been moved to the target server. The path is relative to the data directory of the target server. Save and close the document. The new Refresh Design entry appears in the right pane, under the Build or Promotion Path to which it applies. Special Options Note Build Manager provides special options for design replace and design refresh that cause the behavior to vary significantly from that of the Notes client operations. Be sure to understand the warnings below before configuring these options. Design Refresh Options Clear out current design first If checked, deletes all design elements from the target database prior to refreshing the design. See Side effects of Deleting Design below. Refresh targets that don't specify 'Inherit design from master template' If checked, calls the design refresh API even if the target doesn't have a master template defined. Useful for updating elements that inherit at the element level. Note To match the Notes client's Design Refresh option, leave option 1 unchecked and check option 2. Design Replace Options Keep new template name If checked, Build Manager will leave the new template name in the target database. By default (unchecked), it removes the Inherit from master template name in the target after the refresh. Refresh only (do not delete current design first) If checked, Build Manager does not delete the design of the target database prior to the refresh. See Side effects of Deleting Design below. Respect 'No Refresh' options in target database If checked, the design deletion will not delete elements that have Prohibit design refresh from replacing checked (only available if option 2 is unchecked). Note To match the Notes client's Design Replace option, check options 1 and 2. Side-Effects of Deleting Design Options that trigger the deletion of the target database's design prior to refreshing/replacing have important side-effects that should be carefully considered. When one of the following configurations is used, Build Manager will delete the design of the target database before updating it Design Refresh with Clear out current design checked Design Replace with Refresh only unchecked Side-effects of deleting the design include Folders will lose their document membership, since the folder deletion and recreation essentially creates a new folder. Design refresh will not be able to skip updating design elements that haven't changed, which defeats the purpose of Modified Only Builds . If Design refresh fails after the deletion, the target database may be left empty of design or with an incomplete design. It is therefore recommended that design deletion settings only be used when absolutely necessary.","title":"Refresh/Replace Design"},{"location":"refresh/#refreshreplace-design","text":"Refresh the design of a database or list of databases. Note Certain options available in this step can cause unexpected results. See the Special Options section below to understand how these options differ in behavior from the standard Notes client operations.","title":"Refresh/Replace Design"},{"location":"refresh/#to-refreshreplace-the-design-of-a-database","text":"Select the Build or Promotion Path that relates to the database or template for which you want to automatically refresh the design. Click the Create action button and select Refresh Design . The Refresh Db Design document appears. Enter a descriptive name in the Description field (for example, Refresh Design List ). Deelect the Promotion fails if no databases were found to refresh option if you are refreshing the design of a group of databases and you do not mind if one (or more) of those databases does not exist For Target Server, select the server on which to refresh databases. If the Build Manager administrator has setup refresh restrictions, this field only lists the target server for the promotion. For mode, select either Refresh design or Replace design . See Special Options below for a detailed explanation of the options available for each setting. In the Set Database Title field, select No Change Retain the current database title Same as Template Use the same title as the template that you are refreshing from Custom Enter the new name In the Databases to Refresh field, enter the path of each database that requires refreshing once the template has been moved to the target server. The path is relative to the data directory of the target server. Save and close the document. The new Refresh Design entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Refresh/Replace the Design of a Database"},{"location":"refresh/#special-options","text":"Note Build Manager provides special options for design replace and design refresh that cause the behavior to vary significantly from that of the Notes client operations. Be sure to understand the warnings below before configuring these options.","title":"Special Options"},{"location":"refresh/#design-refresh-options","text":"Clear out current design first If checked, deletes all design elements from the target database prior to refreshing the design. See Side effects of Deleting Design below. Refresh targets that don't specify 'Inherit design from master template' If checked, calls the design refresh API even if the target doesn't have a master template defined. Useful for updating elements that inherit at the element level. Note To match the Notes client's Design Refresh option, leave option 1 unchecked and check option 2.","title":"Design Refresh Options"},{"location":"refresh/#design-replace-options","text":"Keep new template name If checked, Build Manager will leave the new template name in the target database. By default (unchecked), it removes the Inherit from master template name in the target after the refresh. Refresh only (do not delete current design first) If checked, Build Manager does not delete the design of the target database prior to the refresh. See Side effects of Deleting Design below. Respect 'No Refresh' options in target database If checked, the design deletion will not delete elements that have Prohibit design refresh from replacing checked (only available if option 2 is unchecked). Note To match the Notes client's Design Replace option, check options 1 and 2.","title":"Design Replace Options"},{"location":"refresh/#side-effects-of-deleting-design","text":"Options that trigger the deletion of the target database's design prior to refreshing/replacing have important side-effects that should be carefully considered. When one of the following configurations is used, Build Manager will delete the design of the target database before updating it Design Refresh with Clear out current design checked Design Replace with Refresh only unchecked Side-effects of deleting the design include Folders will lose their document membership, since the folder deletion and recreation essentially creates a new folder. Design refresh will not be able to skip updating design elements that haven't changed, which defeats the purpose of Modified Only Builds . If Design refresh fails after the deletion, the target database may be left empty of design or with an incomplete design. It is therefore recommended that design deletion settings only be used when absolutely necessary.","title":"Side-Effects of Deleting Design"},{"location":"release/","text":"Release Notes Build Manager 9.1 is a feature release of Build Manager adding support for 64 bit Notes clients. On 64 bit clients, the Build Manager utility executable is now named TeamstudioBuildManager64.exe rather than TeamstudioBuildManager.exe . Build Manager will detect whether it is running on a 64 or 32 bit client and install the correct executable automatically. From this release onwards, the LotusScript source code for Build Manager is no longer hidden. There are no changes to the licensing terms, but we hope that being able to read the code will help with making the best use of Build Manager in your environment. Owing to complications with library dependencies, the Test Data step is not available on 64 bit clients. There are no other differences between the 64 and 32 bit versions. Upgrading There is no need to upgrade to Build Manager 9.1 if you will be continuing to run Build Manager with a 32 bit Notes client. While future versions will be based on 9.1, Build Manager 9.0.1 remains fully supported and is currently functionally equivalent to 9.1 on 32 bit. To upgrade the Build Manager NSF, sign the template with an ID with appropriate rights, and refresh the design of the Build Manager application. Do the same for Template Registry and Approvals workflow application, if applicable. Note Please note that Build Manager 9.1 requires a valid version 9.1 License Number and Key to use the product. Fix List 9.1.3 [41] Fix 'External function not found' error when switching ID 9.1.2 [188260053] Signing step crashes or errors on 64 bit [188261244] Error displaying stored templates in Template Registry 9.1.1 [188122956] Promotions from Template Registry crash on 64 bit [188122946] Promotions to Template Registry may silently fail on 64 bit [188122936] DB Properties step can fail with a message about missing '$TemplateBuild_Blank' [188152283] Fix 'Type mismatch on external name' errors in bmconfig.ntf 9.1.0 [186245437] Dialog for adding standard paths is empty on Notes 12.0.2+ [186276395] Update help links to use the new help site [186284271] Fix 'Registry Target Servers Lookup Failed' error [186436098] Update TeamstudioBuildManager.exe and LotusScript DLL calls to 64 bit [186633171] Fix 'Create Switch ID' action to launch the correct form [187147388] Disable Test Data step on 64 bit","title":"Release Notes"},{"location":"release/#release-notes","text":"Build Manager 9.1 is a feature release of Build Manager adding support for 64 bit Notes clients. On 64 bit clients, the Build Manager utility executable is now named TeamstudioBuildManager64.exe rather than TeamstudioBuildManager.exe . Build Manager will detect whether it is running on a 64 or 32 bit client and install the correct executable automatically. From this release onwards, the LotusScript source code for Build Manager is no longer hidden. There are no changes to the licensing terms, but we hope that being able to read the code will help with making the best use of Build Manager in your environment. Owing to complications with library dependencies, the Test Data step is not available on 64 bit clients. There are no other differences between the 64 and 32 bit versions.","title":"Release Notes"},{"location":"release/#upgrading","text":"There is no need to upgrade to Build Manager 9.1 if you will be continuing to run Build Manager with a 32 bit Notes client. While future versions will be based on 9.1, Build Manager 9.0.1 remains fully supported and is currently functionally equivalent to 9.1 on 32 bit. To upgrade the Build Manager NSF, sign the template with an ID with appropriate rights, and refresh the design of the Build Manager application. Do the same for Template Registry and Approvals workflow application, if applicable. Note Please note that Build Manager 9.1 requires a valid version 9.1 License Number and Key to use the product.","title":"Upgrading"},{"location":"release/#fix-list","text":"","title":"Fix List"},{"location":"release/#913","text":"[41] Fix 'External function not found' error when switching ID","title":"9.1.3"},{"location":"release/#912","text":"[188260053] Signing step crashes or errors on 64 bit [188261244] Error displaying stored templates in Template Registry","title":"9.1.2"},{"location":"release/#911","text":"[188122956] Promotions from Template Registry crash on 64 bit [188122946] Promotions to Template Registry may silently fail on 64 bit [188122936] DB Properties step can fail with a message about missing '$TemplateBuild_Blank' [188152283] Fix 'Type mismatch on external name' errors in bmconfig.ntf","title":"9.1.1"},{"location":"release/#910","text":"[186245437] Dialog for adding standard paths is empty on Notes 12.0.2+ [186276395] Update help links to use the new help site [186284271] Fix 'Registry Target Servers Lookup Failed' error [186436098] Update TeamstudioBuildManager.exe and LotusScript DLL calls to 64 bit [186633171] Fix 'Create Switch ID' action to launch the correct form [187147388] Disable Test Data step on 64 bit","title":"9.1.0"},{"location":"runagent/","text":"Run Agent Run an agent. To Run an Agent Select the database document for which you want to run an agent. Click the Create action button and select Run Agent . The Run Agent document appears The Run Agent document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Run Agent). Click Browse to select the database containing the agent that you want to run. Click Get Agents to populate the Agent Name dropdown. Select an agent. If you want to fail the promotion if the selected agent fails to run, check the Promotion Fails if the agent cannot be initialized checkbox. The following steps require you to perform additional setup detailed in a separate procedure and require the inclusion of additional LotusScript libraries and code modifications. See \u201cUsing the Advanced Features of Run Agent,\u201d below. If you want to pass parameters to an agent or check its status after it runs, check the Enable additional options using agent parameter database checkbox in the Advanced Options section. The following advanced options appear. Get agent status from parameter database after agent runs Include messages from the agent in the promotion log Pass parameters to agent If you want, check the Get agent status from parameter database after agent runs . Check Fail promotion if the agent does not confirm success if you want the database promotion to fail if the agent does not run to completion. If you want, check the Include messages from the agent in the promotion log checkbox If you have parameters you want to pass to the agent, check the Pass parameters to agent checkbox. Save and close the document. The new Run Agent entry appears in the right pane, under the database to which it applies. Note: Build Manager calls the agent you specify with Run Agent using the NotesAgent.RunOnServer() method in LotusScript. Using the Advanced Features of RunAgent Use the following two-part procedure to set up Build Manager to use the advanced features of Run Agent, including passing parameters to the agent, logging messages from agent, and confirming successful completion of an agent. Part One: set up the database and signers on the target server. Make sure AgentParameters.nsf is saved in the Teamstudio directory of the target server (the server where the database containing the agent is located). Make sure the ID promoting the database in Build Manager has Editors rights for AgentParameters.nsf. Make sure the signer of the target agent has Editor rights for AgentParameters.nsf. Part Two: Include the TSAgentParameters library and code to call it. Copy the TSAgentParameters script library from AgentParameters.nsf. Use your custom code to call the methods exposed by the global object Include the library in the options section Option Public Option Declare Use \"TSAgentParameters\" Check that the TSAgentParameter object was created. Build Manager always passes NoteID. If you call the agent without this parameter, no object is created. Sub Initialize If Not TSAgentParemeters Is Nothing Then 'a ParameterDocID was found and the global instance of TSAgentParameters was loaded... Check if it registered an error, for example if it couldn\u2019t find the document or the parameter db. If TSAgentParameters . ErrorNumber <> 0 Then 'test to see if it had errors Error TSAgentParameters . ErrorNumber , TSAgentParameters . ErrorMsg End If Get a single parameter by name. Dim sResult As String sResult = TSAgentParameters . getParameterValue ( \"aStringParam\" )( 0 ) Get all parameter names as an array. Dim paramNames As Variant , i As Integer paramNames = TSAgentParameters . getParameterNames () Log a message to the parameter DB. Call TSAgentParameters . logMessage ( \"Successfully updated configuration document.\" ) Mark status complete. This is what lets Build Manager know if the agent completed successfully. Call TSAgentParameters . markComplete () Get all parameters in a LotusScript list variable Call TSAgentParameters . getParameterList ( vParamList ) 'pass in the list to be populated with values Forall param In vParamList 'convert the list into name-value pairs sPairs = sPairs & Listtag ( param ) & \" = \" & param ( 0 ) & Chr ( 13 ) '(assumes no multi-values) End Forall A complete example. Sub Initialize If TSAgentParameters Is Nothing Then 'no note id was received form NotesAgnet.ParameterDocID '(the agent was called with run() w/o note id, or via UI, etc) 'do nothing, throw errors, or do alternate processing Else If TSAgentParameters . ErrorNumber <> 0 Then Error TSAgentParameters . ErrorNumber , TSAgentParameters . ErrorMsg End If Dim s As New NotesSession Dim db as NotesDatabase Set db = s . CurrentDatabase Dom doc As NotesDocument Set doc = db . GetView ( \"(configuration)\" ). GetFirstDocument () Dim paramNames As Variant , i As Integer paramNames = TSAgentParameters . getParameterNames () For i = 0 To Ubound ( paramNames ) 'copy each item to the document Dim tmpItem As NotesItem Set tmpItem = TSAgentParameters . copyParameterItemToDoc ( paramNames ( i ), doc , paramNames ( i )) If Left$ ( paramNames ( i ), 8 ) = \"Authors_\" Then 'using a naming convention for params makes it easy to set addl properties tmpItem . IsAuthors = True End If Next Call doc . Save ( True , False ) Call TSAgentParameters . logMessage ( \"Successfully updated configuration document\" ) Call TSAgentParameters . markComplete () End If End Sub","title":"Run Agent"},{"location":"runagent/#run-agent","text":"Run an agent.","title":"Run Agent"},{"location":"runagent/#to-run-an-agent","text":"Select the database document for which you want to run an agent. Click the Create action button and select Run Agent . The Run Agent document appears The Run Agent document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Run Agent). Click Browse to select the database containing the agent that you want to run. Click Get Agents to populate the Agent Name dropdown. Select an agent. If you want to fail the promotion if the selected agent fails to run, check the Promotion Fails if the agent cannot be initialized checkbox. The following steps require you to perform additional setup detailed in a separate procedure and require the inclusion of additional LotusScript libraries and code modifications. See \u201cUsing the Advanced Features of Run Agent,\u201d below. If you want to pass parameters to an agent or check its status after it runs, check the Enable additional options using agent parameter database checkbox in the Advanced Options section. The following advanced options appear. Get agent status from parameter database after agent runs Include messages from the agent in the promotion log Pass parameters to agent If you want, check the Get agent status from parameter database after agent runs . Check Fail promotion if the agent does not confirm success if you want the database promotion to fail if the agent does not run to completion. If you want, check the Include messages from the agent in the promotion log checkbox If you have parameters you want to pass to the agent, check the Pass parameters to agent checkbox. Save and close the document. The new Run Agent entry appears in the right pane, under the database to which it applies. Note: Build Manager calls the agent you specify with Run Agent using the NotesAgent.RunOnServer() method in LotusScript.","title":"To Run an Agent"},{"location":"runagent/#using-the-advanced-features-of-runagent","text":"Use the following two-part procedure to set up Build Manager to use the advanced features of Run Agent, including passing parameters to the agent, logging messages from agent, and confirming successful completion of an agent. Part One: set up the database and signers on the target server. Make sure AgentParameters.nsf is saved in the Teamstudio directory of the target server (the server where the database containing the agent is located). Make sure the ID promoting the database in Build Manager has Editors rights for AgentParameters.nsf. Make sure the signer of the target agent has Editor rights for AgentParameters.nsf. Part Two: Include the TSAgentParameters library and code to call it. Copy the TSAgentParameters script library from AgentParameters.nsf. Use your custom code to call the methods exposed by the global object Include the library in the options section Option Public Option Declare Use \"TSAgentParameters\" Check that the TSAgentParameter object was created. Build Manager always passes NoteID. If you call the agent without this parameter, no object is created. Sub Initialize If Not TSAgentParemeters Is Nothing Then 'a ParameterDocID was found and the global instance of TSAgentParameters was loaded... Check if it registered an error, for example if it couldn\u2019t find the document or the parameter db. If TSAgentParameters . ErrorNumber <> 0 Then 'test to see if it had errors Error TSAgentParameters . ErrorNumber , TSAgentParameters . ErrorMsg End If Get a single parameter by name. Dim sResult As String sResult = TSAgentParameters . getParameterValue ( \"aStringParam\" )( 0 ) Get all parameter names as an array. Dim paramNames As Variant , i As Integer paramNames = TSAgentParameters . getParameterNames () Log a message to the parameter DB. Call TSAgentParameters . logMessage ( \"Successfully updated configuration document.\" ) Mark status complete. This is what lets Build Manager know if the agent completed successfully. Call TSAgentParameters . markComplete () Get all parameters in a LotusScript list variable Call TSAgentParameters . getParameterList ( vParamList ) 'pass in the list to be populated with values Forall param In vParamList 'convert the list into name-value pairs sPairs = sPairs & Listtag ( param ) & \" = \" & param ( 0 ) & Chr ( 13 ) '(assumes no multi-values) End Forall A complete example. Sub Initialize If TSAgentParameters Is Nothing Then 'no note id was received form NotesAgnet.ParameterDocID '(the agent was called with run() w/o note id, or via UI, etc) 'do nothing, throw errors, or do alternate processing Else If TSAgentParameters . ErrorNumber <> 0 Then Error TSAgentParameters . ErrorNumber , TSAgentParameters . ErrorMsg End If Dim s As New NotesSession Dim db as NotesDatabase Set db = s . CurrentDatabase Dom doc As NotesDocument Set doc = db . GetView ( \"(configuration)\" ). GetFirstDocument () Dim paramNames As Variant , i As Integer paramNames = TSAgentParameters . getParameterNames () For i = 0 To Ubound ( paramNames ) 'copy each item to the document Dim tmpItem As NotesItem Set tmpItem = TSAgentParameters . copyParameterItemToDoc ( paramNames ( i ), doc , paramNames ( i )) If Left$ ( paramNames ( i ), 8 ) = \"Authors_\" Then 'using a naming convention for params makes it easy to set addl properties tmpItem . IsAuthors = True End If Next Call doc . Save ( True , False ) Call TSAgentParameters . logMessage ( \"Successfully updated configuration document\" ) Call TSAgentParameters . markComplete () End If End Sub","title":"Using the Advanced Features of RunAgent"},{"location":"runcommand/","text":"Run Command Initiate and monitor a Windows command-line program or set of commands, and log and parse the output of the command. This can be used for a wide variety of applications, from simply checking if a file or process exists, to updating information on remote servers via tools like cUrl. Note This step is new in Build Manager 8.0 To Run a Command Select the Promotion path document to which you want to add the Run Command step. Click the Create button and select Run Command . The Run Command document appears. In the Run Command document, the Active radio button should be Yes . Fill in the Description and any desired comments. Enter the command to run in the Script field. This may be a single command-line command, a program to execute, or a series of commands, one per line. Optionally, enable Step fails on unexpected return value to fail the step if the return value of the command does not match. Note that when multiple commands are issued, only the return value of the last command will be returned/tested. Logging can be enabled either by importing or attaching the output of the command(s). Build manager will capture both Standard Out and Standard Error in this log. Additional validation of the results can be accomplished by enabling Additional Verification A Regular Expression can be specified in RegEx to provide pattern matching and capturing capabilities to test the results. If using capturing, a string template can be provided to receive the selected captures, and a string can be provided to compare it to. See the following section for details. Capturing Values via RegEx When Use RegEx to compare captured substring of pattern matches is selected, Build Manager will process the verification in the following manner Find each matching instance of the pattern in the log. For each match, replace $ indexes in the Extract captured text field with values from groupings in the RegEx, creating a replaced match . Compare each replaced match created in the last step to the value provided in the Match capture text to field. If any of the replaced matches match, the step will succeed, otherwise the step will fail. For example, a RegEx like .*processed=(\\d)\\s*.*isnew=(\\d).* and a Match string of [1][1] could be used to check if any line contained processed=1; isnew=1 while failing to match any other values for processed or isnew .","title":"Run Command"},{"location":"runcommand/#run-command","text":"Initiate and monitor a Windows command-line program or set of commands, and log and parse the output of the command. This can be used for a wide variety of applications, from simply checking if a file or process exists, to updating information on remote servers via tools like cUrl. Note This step is new in Build Manager 8.0","title":"Run Command"},{"location":"runcommand/#to-run-a-command","text":"Select the Promotion path document to which you want to add the Run Command step. Click the Create button and select Run Command . The Run Command document appears. In the Run Command document, the Active radio button should be Yes . Fill in the Description and any desired comments. Enter the command to run in the Script field. This may be a single command-line command, a program to execute, or a series of commands, one per line. Optionally, enable Step fails on unexpected return value to fail the step if the return value of the command does not match. Note that when multiple commands are issued, only the return value of the last command will be returned/tested. Logging can be enabled either by importing or attaching the output of the command(s). Build manager will capture both Standard Out and Standard Error in this log. Additional validation of the results can be accomplished by enabling Additional Verification A Regular Expression can be specified in RegEx to provide pattern matching and capturing capabilities to test the results. If using capturing, a string template can be provided to receive the selected captures, and a string can be provided to compare it to. See the following section for details.","title":"To Run a Command"},{"location":"runcommand/#capturing-values-via-regex","text":"When Use RegEx to compare captured substring of pattern matches is selected, Build Manager will process the verification in the following manner Find each matching instance of the pattern in the log. For each match, replace $ indexes in the Extract captured text field with values from groupings in the RegEx, creating a replaced match . Compare each replaced match created in the last step to the value provided in the Match capture text to field. If any of the replaced matches match, the step will succeed, otherwise the step will fail. For example, a RegEx like .*processed=(\\d)\\s*.*isnew=(\\d).* and a Match string of [1][1] could be used to check if any line contained processed=1; isnew=1 while failing to match any other values for processed or isnew .","title":"Capturing Values via RegEx"},{"location":"signdb/","text":"Sign Database or Template Automate database signing. To Sign the Promoted File Select the Build or Promotion Path that relates to the database or template which you want to sign. Click the Create action button and select Sign Design . The Sign Database document appears. The Sign Database document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Sign DB with Production ID ). Check either Stored ID or Attach ID. If you select Stored ID, click the Stored ID dropdown to select a stored ID from the list. If you select Attach ID, browse to attach the ID file of the ID required to sign the database once it has been moved to the next server. You must also specify a password using the Password field for the attached ID. Select from the following options. Sign all notes Sign elements by title - specify one element per line Sign elements by Note ID - specify one element per line using hexadecimal Sign Agents and Script Libraries Sign notes not signed by the above ID Save and close the document. The new Sign Database entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Sign Database or Template"},{"location":"signdb/#sign-database-or-template","text":"Automate database signing.","title":"Sign Database or Template"},{"location":"signdb/#to-sign-the-promoted-file","text":"Select the Build or Promotion Path that relates to the database or template which you want to sign. Click the Create action button and select Sign Design . The Sign Database document appears. The Sign Database document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Sign DB with Production ID ). Check either Stored ID or Attach ID. If you select Stored ID, click the Stored ID dropdown to select a stored ID from the list. If you select Attach ID, browse to attach the ID file of the ID required to sign the database once it has been moved to the next server. You must also specify a password using the Password field for the attached ID. Select from the following options. Sign all notes Sign elements by title - specify one element per line Sign elements by Note ID - specify one element per line using hexadecimal Sign Agents and Script Libraries Sign notes not signed by the above ID Save and close the document. The new Sign Database entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Sign the Promoted File"},{"location":"sracl/","text":"Stored ACLs To make the build process more consistent, you can refer to a stored ACL. These ACLs can then be imported into any Promotion Path in a database or a Standard Path. Stored ACLs may either be created manually or by importing an ACL from an existing database. To Create a Stored ACL From the Resources tab, select Resources|Stored ACLs . Click the Create Stored ACL action button on the toolbar. The Stored ACL File dialog box appears. Active is set by default. Do not change this. Enter a description (for example, Production Template Access ). If appropriate, specify any roles, one per line. Click the dropdown beside the Administration Server field, and select a server name from the dialog box. The list of servers presented is derived from the the list of Stored Servers. Set Enforce Consistent if appropriate. Click the dropdown beside the Maximum Internet Access field and select a role from the dialog box. Save & exit.","title":"Stored ACLs"},{"location":"sracl/#stored-acls","text":"To make the build process more consistent, you can refer to a stored ACL. These ACLs can then be imported into any Promotion Path in a database or a Standard Path. Stored ACLs may either be created manually or by importing an ACL from an existing database.","title":"Stored ACLs"},{"location":"sracl/#to-create-a-stored-acl","text":"From the Resources tab, select Resources|Stored ACLs . Click the Create Stored ACL action button on the toolbar. The Stored ACL File dialog box appears. Active is set by default. Do not change this. Enter a description (for example, Production Template Access ). If appropriate, specify any roles, one per line. Click the dropdown beside the Administration Server field, and select a server name from the dialog box. The list of servers presented is derived from the the list of Stored Servers. Set Enforce Consistent if appropriate. Click the dropdown beside the Maximum Internet Access field and select a role from the dialog box. Save & exit.","title":"To Create a Stored ACL"},{"location":"sraclentry/","text":"Stored ACL Entry To Create a Stored ACL Entry From the Resources tab, choose Resources|Stored ACLs . Click the Create Stored ACL Entry action button. The ACL Entry dialog box appears. Active is set by default. Do not change this. Click the dropdown beside the Name field and select an individual or group. Click the dropdown beside the Type field and select the type (for example, unspecified , person , server or mixed group ) Click the dropdown beside the Level field and select the level (for example, No access , Depositor , Reader or Editor ). Rights appear based on the type. Select the appropriate rights that you want to assign. Select the role(s) from the available checkboxes. Save and exit. To Import an ACL From the Resources tab, choose Resources|Select Stored ACL Click the Import ACL action button. The Choose Database dialog box appears. Browse to select the database with the ACL you want to import. Click Open . The requested ACL, along with its attached entries, appears in the list of Stored ACLs.","title":"Stored ACL Entry"},{"location":"sraclentry/#stored-acl-entry","text":"","title":"Stored ACL Entry"},{"location":"sraclentry/#to-create-a-stored-acl-entry","text":"From the Resources tab, choose Resources|Stored ACLs . Click the Create Stored ACL Entry action button. The ACL Entry dialog box appears. Active is set by default. Do not change this. Click the dropdown beside the Name field and select an individual or group. Click the dropdown beside the Type field and select the type (for example, unspecified , person , server or mixed group ) Click the dropdown beside the Level field and select the level (for example, No access , Depositor , Reader or Editor ). Rights appear based on the type. Select the appropriate rights that you want to assign. Select the role(s) from the available checkboxes. Save and exit.","title":"To Create a Stored ACL Entry"},{"location":"sraclentry/#to-import-an-acl","text":"From the Resources tab, choose Resources|Select Stored ACL Click the Import ACL action button. The Choose Database dialog box appears. Browse to select the database with the ACL you want to import. Click Open . The requested ACL, along with its attached entries, appears in the list of Stored ACLs.","title":"To Import an ACL"},{"location":"srids/","text":"Stored IDs The Stored IDs feature allows the saving of an ID file - together with its password - inside Build Manager. This enables the Build manager Administrator (the person who will be creating Promotion Paths on a regular bases) to create Promotion Paths which utilize the ID file without actually granting them access to the actual ID file or its password. Multiple IDs and their passwords may be stored in Build Manager each used for a different task e.g. signing a database or performing a promotion. To create a Stored ID From the Resources tab, select Resources then Create Resource|Create Stored ID . Active is set by default. Do not change this. Enter a description (for example, Signing Production DBs ID). Add a comment to describe the purpose of the ID. Click the Select ID button and browse to an ID file. Enter the password for the ID file into the ID Password field. Save and close.","title":"Stored IDs"},{"location":"srids/#stored-ids","text":"The Stored IDs feature allows the saving of an ID file - together with its password - inside Build Manager. This enables the Build manager Administrator (the person who will be creating Promotion Paths on a regular bases) to create Promotion Paths which utilize the ID file without actually granting them access to the actual ID file or its password. Multiple IDs and their passwords may be stored in Build Manager each used for a different task e.g. signing a database or performing a promotion.","title":"Stored IDs"},{"location":"srids/#to-create-a-stored-id","text":"From the Resources tab, select Resources then Create Resource|Create Stored ID . Active is set by default. Do not change this. Enter a description (for example, Signing Production DBs ID). Add a comment to describe the purpose of the ID. Click the Select ID button and browse to an ID file. Enter the password for the ID file into the ID Password field. Save and close.","title":"To create a Stored ID"},{"location":"srintro/","text":"Introduction Using Teamstudio Build Manager Administration functions, you can create Stored IDs, Stored ACLs, Stored Server Names and Standard Paths to help automate your build process. These features make it much easier to create new Promotion and Build Paths. In addition it helps to ensure the consistency of the Build and Promotion Paths that are created. To find the stored resources simply open your Build Manager configuration database. Ensure you have appropriate ACL roles, and you will see 3 tabs within the left hand panel: Basics, Admin and Resources. When you select resources you should see the expandable menu as per the figure below.","title":"Introduction"},{"location":"srintro/#introduction","text":"Using Teamstudio Build Manager Administration functions, you can create Stored IDs, Stored ACLs, Stored Server Names and Standard Paths to help automate your build process. These features make it much easier to create new Promotion and Build Paths. In addition it helps to ensure the consistency of the Build and Promotion Paths that are created. To find the stored resources simply open your Build Manager configuration database. Ensure you have appropriate ACL roles, and you will see 3 tabs within the left hand panel: Basics, Admin and Resources. When you select resources you should see the expandable menu as per the figure below.","title":"Introduction"},{"location":"srnetwork/","text":"Stored Network Shares Note This feature is new in Build Manager 8.0 The Stored Network Shares feature allows the saving of a network share location - along with credentials to access that resource - inside Build Manager. This enables the Build manager Administrator (the person who will be creating Promotion Paths on a regular base) to create Promotion Paths which utilize the share's credentials without actually granting them access to the password. Network Shares are currently only utilized in the Create Test Data step. Build Manager can connect to Network Shares using either built-in Windows networking features, or via the open-source JCIFS library. See the section below on Connection Types for important information about licensing, source code, and pros and cons of each approach. To create a Stored Network Share From the Resources tab, select Resources then Create Resource|Create Stored Network Share . Active is set by default. Do not change this. Enter a description. The description will be used to select the share in other steps. Choose a Connection Type (see the section below for details on the pros and cons of connection types) JCIFS will use the open-source Java library from https://jcifs.samba.org/ Windows Networking will use Windows APIs similar to NET USE commands. Enter User Name , Domain (if needed), and Password to define the credentials to use when connecting JCIFS Properties If using JCIFS, any valid JCIFS properties can be set to improve performance. See https://jcifs.samba.org/src/docs/api/ for details. Save and close. Connection Types Build Manager supports connecting to Network Shares using either built-in Windows networking features, or via the open-source JCIFS library. JCIFS is distributed under the GNU LESSER GENERAL PUBLIC LICENSE. A full copy of the license, along with source code, can be accessed in Domino Designer, in the Page design element (BMSupportingFiles) inside the Build Manager database. More technical details can also be found there. Build Manager uses the JCIFS library by dynamically linking the unmodified JCIFS JAR from a small utility JAR, the source of which is also included. The native windows option uses Windows APIs (equivalent to \"NET USE\" commands). There are pros and cons to each. Windows APIs Pros Minimal configuration required. No installation of 3rd party software required. Generally works with all standard UNC\\SMB\\Windows file-sharing services Cons Potentially less secure as there is no way to guarantee complete closing of a connection until the windows session is ended. See security note below. JCIFS Pros More configurable. Does not leave access to share for the remainder of windows session - the connection is only available through JCIFS client. Cons Requires JAR installation and restart. More complex to configure and troubleshoot. Does not currently support SMB v3. Security When using NET USE or equivalent Windows APIs - even without mapping a share to a drive letter - shares can remain available in the current user's windows session until it ends. This is probably of little concern for users are accessing read-only directories via Build Manager, or if the step is set to run on the server (as server sessions are typically not accessible to non-admin users). If a higher level of security is required when the Copy Data step is run on the client, the JCIFS option may be used. Installing JCIFS To run JCIFS, the JCIFS JAR file, along with the Build Manager utility JAR file must be installed in the local Notes/Domino install's jvm/ext folder (typically \\jvm\\lib\\ext). When a step is run requiring JCIFS and set to run on the local Notes client, Build Manager will offer to install the JAR files. After install, Notes must be restarted. To install on a Domino server, save both JAR files (located in the Page design element BMSupportingFiles ) to the servers EXT directory, and restart the server. Because of the required restart and the general administrative and security concerns of a server environment, Build Manager will not offer to install these files on a server.","title":"Stored Network Shares"},{"location":"srnetwork/#stored-network-shares","text":"Note This feature is new in Build Manager 8.0 The Stored Network Shares feature allows the saving of a network share location - along with credentials to access that resource - inside Build Manager. This enables the Build manager Administrator (the person who will be creating Promotion Paths on a regular base) to create Promotion Paths which utilize the share's credentials without actually granting them access to the password. Network Shares are currently only utilized in the Create Test Data step. Build Manager can connect to Network Shares using either built-in Windows networking features, or via the open-source JCIFS library. See the section below on Connection Types for important information about licensing, source code, and pros and cons of each approach.","title":"Stored Network Shares"},{"location":"srnetwork/#to-create-a-stored-network-share","text":"From the Resources tab, select Resources then Create Resource|Create Stored Network Share . Active is set by default. Do not change this. Enter a description. The description will be used to select the share in other steps. Choose a Connection Type (see the section below for details on the pros and cons of connection types) JCIFS will use the open-source Java library from https://jcifs.samba.org/ Windows Networking will use Windows APIs similar to NET USE commands. Enter User Name , Domain (if needed), and Password to define the credentials to use when connecting JCIFS Properties If using JCIFS, any valid JCIFS properties can be set to improve performance. See https://jcifs.samba.org/src/docs/api/ for details. Save and close.","title":"To create a Stored Network Share"},{"location":"srnetwork/#connection-types","text":"Build Manager supports connecting to Network Shares using either built-in Windows networking features, or via the open-source JCIFS library. JCIFS is distributed under the GNU LESSER GENERAL PUBLIC LICENSE. A full copy of the license, along with source code, can be accessed in Domino Designer, in the Page design element (BMSupportingFiles) inside the Build Manager database. More technical details can also be found there. Build Manager uses the JCIFS library by dynamically linking the unmodified JCIFS JAR from a small utility JAR, the source of which is also included. The native windows option uses Windows APIs (equivalent to \"NET USE\" commands). There are pros and cons to each.","title":"Connection Types"},{"location":"srnetwork/#windows-apis","text":"","title":"Windows APIs"},{"location":"srnetwork/#pros","text":"Minimal configuration required. No installation of 3rd party software required. Generally works with all standard UNC\\SMB\\Windows file-sharing services","title":"Pros"},{"location":"srnetwork/#cons","text":"Potentially less secure as there is no way to guarantee complete closing of a connection until the windows session is ended. See security note below.","title":"Cons"},{"location":"srnetwork/#jcifs","text":"","title":"JCIFS"},{"location":"srnetwork/#pros_1","text":"More configurable. Does not leave access to share for the remainder of windows session - the connection is only available through JCIFS client.","title":"Pros"},{"location":"srnetwork/#cons_1","text":"Requires JAR installation and restart. More complex to configure and troubleshoot. Does not currently support SMB v3.","title":"Cons"},{"location":"srnetwork/#security","text":"When using NET USE or equivalent Windows APIs - even without mapping a share to a drive letter - shares can remain available in the current user's windows session until it ends. This is probably of little concern for users are accessing read-only directories via Build Manager, or if the step is set to run on the server (as server sessions are typically not accessible to non-admin users). If a higher level of security is required when the Copy Data step is run on the client, the JCIFS option may be used.","title":"Security"},{"location":"srnetwork/#installing-jcifs","text":"To run JCIFS, the JCIFS JAR file, along with the Build Manager utility JAR file must be installed in the local Notes/Domino install's jvm/ext folder (typically \\jvm\\lib\\ext). When a step is run requiring JCIFS and set to run on the local Notes client, Build Manager will offer to install the JAR files. After install, Notes must be restarted. To install on a Domino server, save both JAR files (located in the Page design element BMSupportingFiles ) to the servers EXT directory, and restart the server. Because of the required restart and the general administrative and security concerns of a server environment, Build Manager will not offer to install these files on a server.","title":"Installing JCIFS"},{"location":"srpaths/","text":"Standard Paths Standard Paths are a convenient template used to store common steps for use with most databases. If a large percentage of your applications go through the same automated steps for promotions to each environment the steps can be stored here as a one time configuration and then applied to to each database where necessary. This saves time manually configuring each database with similar automated activities for each Build or Promotion Path. To Create a Standard Path From the Resources tab, select Stored Resources - Standard Paths . Select the first document in the view then click Create|Build Path or Create|Promotion Path . Set up the Promotion Path as you would for a database with the automated steps configured. Use the macro language where possible so steps are not specific to one particular database. It is recommended that you select all the steps for each path and disable them. This is a visual guide for administrators when using Standard Paths. Once applied to a database the Administrator can then review each path for applicability and further configure the step if required before enabling the step under the database referenced. If any step is not needed once applied to the database you can delete the step under the Promotion Path of the Database. This does not affect the steps or order stored in the Standard Path. To apply a Standard Path to a database, select the configuration document then click Build Manager|Copy Standard Path .","title":"Standard Paths"},{"location":"srpaths/#standard-paths","text":"Standard Paths are a convenient template used to store common steps for use with most databases. If a large percentage of your applications go through the same automated steps for promotions to each environment the steps can be stored here as a one time configuration and then applied to to each database where necessary. This saves time manually configuring each database with similar automated activities for each Build or Promotion Path.","title":"Standard Paths"},{"location":"srpaths/#to-create-a-standard-path","text":"From the Resources tab, select Stored Resources - Standard Paths . Select the first document in the view then click Create|Build Path or Create|Promotion Path . Set up the Promotion Path as you would for a database with the automated steps configured. Use the macro language where possible so steps are not specific to one particular database. It is recommended that you select all the steps for each path and disable them. This is a visual guide for administrators when using Standard Paths. Once applied to a database the Administrator can then review each path for applicability and further configure the step if required before enabling the step under the database referenced. If any step is not needed once applied to the database you can delete the step under the Promotion Path of the Database. This does not affect the steps or order stored in the Standard Path. To apply a Standard Path to a database, select the configuration document then click Build Manager|Copy Standard Path .","title":"To Create a Standard Path"},{"location":"srserver/","text":"Stored Servers You must define a list of servers to which you want to promote databases. From a stored server document you can also predefine who can promote to each of those servers. This improves security by separating server access authority from the authority to create an action. Stored servers may either be specified manually or imported from the Domino\u00ae Directory. To Import Servers From the Resources tab, choose Resources|Stored Servers . Click the Import Servers action button. Click Browse and specify the address book to use. Click OK. Each server listed in the Domino Directory will have a Stored Server document. Delete any servers that are not valid targets Modify each of the Stored Server documents as follows: Click the dropdown beside the Promotion Authority List field and select one or more users and/or groups who have the authority to promote to this server. When creating promotion paths to this server, any names listed in this field become the only allowed users of that promotion path. Click the dropdown beside the Allowed Refresh Servers field and select a server that can be refreshed or All When promoting to the specified server. The servers listed are the only servers allowed to refresh databases. Save and exit.","title":"Stored Servers"},{"location":"srserver/#stored-servers","text":"You must define a list of servers to which you want to promote databases. From a stored server document you can also predefine who can promote to each of those servers. This improves security by separating server access authority from the authority to create an action. Stored servers may either be specified manually or imported from the Domino\u00ae Directory.","title":"Stored Servers"},{"location":"srserver/#to-import-servers","text":"From the Resources tab, choose Resources|Stored Servers . Click the Import Servers action button. Click Browse and specify the address book to use. Click OK. Each server listed in the Domino Directory will have a Stored Server document. Delete any servers that are not valid targets Modify each of the Stored Server documents as follows: Click the dropdown beside the Promotion Authority List field and select one or more users and/or groups who have the authority to promote to this server. When creating promotion paths to this server, any names listed in this field become the only allowed users of that promotion path. Click the dropdown beside the Allowed Refresh Servers field and select a server that can be refreshed or All When promoting to the specified server. The servers listed are the only servers allowed to refresh databases. Save and exit.","title":"To Import Servers"},{"location":"srtr/","text":"Template Registries Note The server the Template Registry resides on (even if it is on the same server as the Build Manager configuration database) must be added to (or already listed in) the Stored Servers category. The Template Registries View lists all configured stages in the Template Registry that have been configured to work with this instance of Build Manager. To Create a Template Registry Stage Click the Template Registry... button on the toolbar, select Add New Registry . Template Registry Select the Template Registry database. Environments Add the registry stage that has already been created. Build Authority List Select users from the NAB that can execute builds to this registry stage. Blank allows any user. Promotion Authority List Select users from the NAB that can execute promotions from this registry stage. Allowed Target Servers Specify servers that will be the targets of promotions from this registry stage. Save and close.","title":"Template Registries"},{"location":"srtr/#template-registries","text":"Note The server the Template Registry resides on (even if it is on the same server as the Build Manager configuration database) must be added to (or already listed in) the Stored Servers category. The Template Registries View lists all configured stages in the Template Registry that have been configured to work with this instance of Build Manager.","title":"Template Registries"},{"location":"srtr/#to-create-a-template-registry-stage","text":"Click the Template Registry... button on the toolbar, select Add New Registry . Template Registry Select the Template Registry database. Environments Add the registry stage that has already been created. Build Authority List Select users from the NAB that can execute builds to this registry stage. Blank allows any user. Promotion Authority List Select users from the NAB that can execute promotions from this registry stage. Allowed Target Servers Specify servers that will be the targets of promotions from this registry stage. Save and close.","title":"To Create a Template Registry Stage"},{"location":"star/","text":"Search and Replace Perform a search and replace in a database. Note This action requires that a licensed copy of Teamstudio Configurator is installed on each workstation that is performing a promotion. To Create a Search and Replace Select the Build or Promotion Path that relates to the database or template in which you want to search and replace text. Click the Create button and select Search and Replace . The Search and Replace document appears. The Search and Replace document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, change email address). Enter the text you want to find into the Find field (for example, testers@teamstudio.com). Note: The blue percent sign (%) indicates that you can use replacement macros in this field. Click the blue percent sign to view all options. Enter the text you want to replace it with into the Replace field (for example, users@teamstudio.com). Specify if you want to recompile after the replacement is complete ( Yes or No ) Select a search option ( Design and/or Documents ). If you want to search by design, enter @All for the entire design (default) or enter other criteria. If you want to search by document, specify View or Formula. In either case, specify the view or the formula. Select one or more Match options. Check the Verify Result box if you want the build to fail if a threshold of replacements is not made. The new Search and Replace entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Search and Replace"},{"location":"star/#search-and-replace","text":"Perform a search and replace in a database. Note This action requires that a licensed copy of Teamstudio Configurator is installed on each workstation that is performing a promotion.","title":"Search and Replace"},{"location":"star/#to-create-a-search-and-replace","text":"Select the Build or Promotion Path that relates to the database or template in which you want to search and replace text. Click the Create button and select Search and Replace . The Search and Replace document appears. The Search and Replace document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, change email address). Enter the text you want to find into the Find field (for example, testers@teamstudio.com). Note: The blue percent sign (%) indicates that you can use replacement macros in this field. Click the blue percent sign to view all options. Enter the text you want to replace it with into the Replace field (for example, users@teamstudio.com). Specify if you want to recompile after the replacement is complete ( Yes or No ) Select a search option ( Design and/or Documents ). If you want to search by design, enter @All for the entire design (default) or enter other criteria. If you want to search by document, specify View or Formula. In either case, specify the view or the formula. Select one or more Match options. Check the Verify Result box if you want the build to fail if a threshold of replacements is not made. The new Search and Replace entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Create a Search and Replace"},{"location":"switchid/","text":"Switch ID Switch to another Notes ID during a Build Manager promotion. To Switch ID Select the Build or Promotion Path that relates to the database or template for which you want to switch IDs. Click the Create action button and select Switch ID . The Switch to ID document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Configure the ID to switch to in the ID Settings section. Save and close the document. To Revert ID Follow the steps above. Specify Promoting ID to return to the original ID used in the promotion.","title":"Switch ID"},{"location":"switchid/#switch-id","text":"Switch to another Notes ID during a Build Manager promotion.","title":"Switch ID"},{"location":"switchid/#to-switch-id","text":"Select the Build or Promotion Path that relates to the database or template for which you want to switch IDs. Click the Create action button and select Switch ID . The Switch to ID document appears. This document is active by default. Leave this setting. Enter a descriptive name in the Description field. Configure the ID to switch to in the ID Settings section. Save and close the document.","title":"To Switch ID"},{"location":"switchid/#to-revert-id","text":"Follow the steps above. Specify Promoting ID to return to the original ID used in the promotion.","title":"To Revert ID"},{"location":"testdata/","text":"Create Test Data Populate your test dest database with a predefined set of documents, ensuring an accurate baseline for testing. Note This step is new in Build manager 8.0 Configuring a Test Data Step Select the Promotion path document to which you want to add the Test Data step. Click the Create button and choose Create Test Data . The Test Data document appears In the Test Data document, the Active radio button should be Yes . Fill in the Description and any desired comments. Choose Source Type to determine where to obtain source documents. For details on Network Share operations, see the note later in this document. Set Run on to control where the data copying should occur. Run on Client is the preferred mode, as it does not require special server setup (see Server Setup below for details). However, Run on Server may be used to avoid copying data via the client where large volumes of test data are involved. If Run on Server is selected, additional options will appear. RunOnServer runs the Test Data creation on the server by a direct call to NotesAgent.runOnServer. The promotion will block entirely, without any status updates, until the copy completes. Separate Process will create a new process and run the test data creation on the server, allowing Build Manager to read and update status during the copy. This option is generally more user-friendly, however, the RunOnServer option has less complex interactions and can be used if this option does not work as expected. Specify the location of the Source database from which to copy test data. If Domino is chosen as Source Type, this is the server and file path of the database. When using Network Share you can use a Stored Network Share or define the share's connection property here. For details on configuring Network Shares, see the documentation. If copying the source database from a Network Share, specify the Temporary Storage Location where the database should be copied locally. Optionally, a Domino Directory Link can be specified to open this new database copy as if it were in the data directory. Specify Target Server and Target Database to indicate the database where test data should be copied/restored. If Run on Server is specified, specify the location of Build Manager on the target server in the Target Build Manager field. For Run on Server , a copy of Build Manager must exist on the server where the copy will take place, and must be signed with an ID capable of running restricted operations. This Build Manager does not need to be the current Build Manager, and does not require other configuration. Under Target Preparation the target database (where test data will be copied/restored) can be prepared by deleting existing documents. Documents can be deleted by selection formula, or by specifying views that documents appearing in should not be deleted - the later is best for performance on large datasets. Under Documents to Copy , specify the documents that should be copied from the source to the target. Documents will be copied with UNIDs and parent-child relationships preserved. If a document exists in the target, the source document will overwrite it. \\ Documents can be copied by selection formula, or all documents except those that appear in certain views. \\ For large datasets, removing documents via the Target Preparation options is more efficient than allowing them to be overwritten. If profile documents should be updated from the source to the target, specify the profile document names under Copy Profile Documents . Optionally, specify Recreate Full Text Index to ensure that the index is dropped and rebuilt when the copy is completed. Note that this requires the index to have been enabled on the target database prior to the promotion, or the step will fail. Save and close the document. The new Create Test Data entry appears under the Build or Promotion Path to which it applies. Network Shares Build Manager can copy the test data source database from a network file share. This option can be useful for preserving clean snapshots of QA data without taking up server space. For details on configuring Network Shares, see the documentation .","title":"Create Test Data"},{"location":"testdata/#create-test-data","text":"Populate your test dest database with a predefined set of documents, ensuring an accurate baseline for testing. Note This step is new in Build manager 8.0","title":"Create Test Data"},{"location":"testdata/#configuring-a-test-data-step","text":"Select the Promotion path document to which you want to add the Test Data step. Click the Create button and choose Create Test Data . The Test Data document appears In the Test Data document, the Active radio button should be Yes . Fill in the Description and any desired comments. Choose Source Type to determine where to obtain source documents. For details on Network Share operations, see the note later in this document. Set Run on to control where the data copying should occur. Run on Client is the preferred mode, as it does not require special server setup (see Server Setup below for details). However, Run on Server may be used to avoid copying data via the client where large volumes of test data are involved. If Run on Server is selected, additional options will appear. RunOnServer runs the Test Data creation on the server by a direct call to NotesAgent.runOnServer. The promotion will block entirely, without any status updates, until the copy completes. Separate Process will create a new process and run the test data creation on the server, allowing Build Manager to read and update status during the copy. This option is generally more user-friendly, however, the RunOnServer option has less complex interactions and can be used if this option does not work as expected. Specify the location of the Source database from which to copy test data. If Domino is chosen as Source Type, this is the server and file path of the database. When using Network Share you can use a Stored Network Share or define the share's connection property here. For details on configuring Network Shares, see the documentation. If copying the source database from a Network Share, specify the Temporary Storage Location where the database should be copied locally. Optionally, a Domino Directory Link can be specified to open this new database copy as if it were in the data directory. Specify Target Server and Target Database to indicate the database where test data should be copied/restored. If Run on Server is specified, specify the location of Build Manager on the target server in the Target Build Manager field. For Run on Server , a copy of Build Manager must exist on the server where the copy will take place, and must be signed with an ID capable of running restricted operations. This Build Manager does not need to be the current Build Manager, and does not require other configuration. Under Target Preparation the target database (where test data will be copied/restored) can be prepared by deleting existing documents. Documents can be deleted by selection formula, or by specifying views that documents appearing in should not be deleted - the later is best for performance on large datasets. Under Documents to Copy , specify the documents that should be copied from the source to the target. Documents will be copied with UNIDs and parent-child relationships preserved. If a document exists in the target, the source document will overwrite it. \\ Documents can be copied by selection formula, or all documents except those that appear in certain views. \\ For large datasets, removing documents via the Target Preparation options is more efficient than allowing them to be overwritten. If profile documents should be updated from the source to the target, specify the profile document names under Copy Profile Documents . Optionally, specify Recreate Full Text Index to ensure that the index is dropped and rebuilt when the copy is completed. Note that this requires the index to have been enabled on the target database prior to the promotion, or the step will fail. Save and close the document. The new Create Test Data entry appears under the Build or Promotion Path to which it applies.","title":"Configuring a Test Data Step"},{"location":"testdata/#network-shares","text":"Build Manager can copy the test data source database from a network file share. This option can be useful for preserving clean snapshots of QA data without taking up server space. For details on configuring Network Shares, see the documentation .","title":"Network Shares"},{"location":"tracking/","text":"Tracking Deployments Build Manager version 8 and later provides two options to track deployment Deployment Tracking Creates a tracking document as a response document to the Template document for each target database refreshed, including information about how and when the refresh occurred. Deployment Status Sets a custom status message on the Template document when a promotion has deployed a template. Each of these options has a specific purpose. Deployment tracking documents each environment and refresh target where a Template has gone, allowing detailed views and reports to be created giving insight into the current deployment status of a Template, or trends over time. Deployment status creates a data element in the Template document itself so that views and reports can be created that include information about the status of the template in your environment. Because the status value is configurable, the status can be set to whatever value makes sense in your environment. Configuration Tracking is configured on the Promotion Path document, and can only be set for Promotions that originate from a Template Registry database. Note This feature requires Template Registry version 1.1.8 (included in the Build Manager 8.0 release) or higher. Failure to update the Template Registry will cause errors during promotion which will persist until the template is upgraded. Proper signing is required for some features, see Signing, below. To enable this feature, check the Deployment Tracking option on the desired Promotion Path. Tracking Document Status allows you to add a custom status to the per-refreshed-database tracking documents created. Macros can be used. Template Status allows you to add a status to the main Template document as a result of the promotion. Macros can be used. Statuses and deployment records are available in Template Registry views. Views only containing deployment records can be organized to highlight specific properties. Signing and Security In order to provide adequate security for the Template document in Template Registry, updates during promotions to the main template document are accomplished by calling the Template Registry agent (ProcessStatusUpdate), which must be signed with an ID that has editor rights to the Template Registry, and the ACL Role [AddTemplateEnvironments]. Updating the Template document status is optional, and if no status is specified in the Template Status field, no update will occur. Enabling Deployment Tracking creates response documents, so the active user (Promotion ID or initiating user) must have ACL Create Document rights in the Template Registry. Deployment Tracking documents are used to update the Template Status on the Template document. It is not possible to update Template Status unless Deployment Tracking is enabled.","title":"Tracking Deployments"},{"location":"tracking/#tracking-deployments","text":"Build Manager version 8 and later provides two options to track deployment Deployment Tracking Creates a tracking document as a response document to the Template document for each target database refreshed, including information about how and when the refresh occurred. Deployment Status Sets a custom status message on the Template document when a promotion has deployed a template. Each of these options has a specific purpose. Deployment tracking documents each environment and refresh target where a Template has gone, allowing detailed views and reports to be created giving insight into the current deployment status of a Template, or trends over time. Deployment status creates a data element in the Template document itself so that views and reports can be created that include information about the status of the template in your environment. Because the status value is configurable, the status can be set to whatever value makes sense in your environment.","title":"Tracking Deployments"},{"location":"tracking/#configuration","text":"Tracking is configured on the Promotion Path document, and can only be set for Promotions that originate from a Template Registry database. Note This feature requires Template Registry version 1.1.8 (included in the Build Manager 8.0 release) or higher. Failure to update the Template Registry will cause errors during promotion which will persist until the template is upgraded. Proper signing is required for some features, see Signing, below. To enable this feature, check the Deployment Tracking option on the desired Promotion Path. Tracking Document Status allows you to add a custom status to the per-refreshed-database tracking documents created. Macros can be used. Template Status allows you to add a status to the main Template document as a result of the promotion. Macros can be used. Statuses and deployment records are available in Template Registry views. Views only containing deployment records can be organized to highlight specific properties.","title":"Configuration"},{"location":"tracking/#signing-and-security","text":"In order to provide adequate security for the Template document in Template Registry, updates during promotions to the main template document are accomplished by calling the Template Registry agent (ProcessStatusUpdate), which must be signed with an ID that has editor rights to the Template Registry, and the ACL Role [AddTemplateEnvironments]. Updating the Template document status is optional, and if no status is specified in the Template Status field, no update will occur. Enabling Deployment Tracking creates response documents, so the active user (Promotion ID or initiating user) must have ACL Create Document rights in the Template Registry. Deployment Tracking documents are used to update the Template Status on the Template document. It is not possible to update Template Status unless Deployment Tracking is enabled.","title":"Signing and Security"},{"location":"troubleshooting/","text":"Troubleshooting If unexpected build failures occur, there are two options that can be set to help diagnose the problem. Turn up logging. Click the Build Manager button on the toolbar and select Settings... . Change the Logging Detail from * Default to All Function Calls . Promote again and check the log. Run actions in the foreground. Click the Build Manager button on the toolbar and select Settings... \u2019. Uncheck (deselect) the Run utilities in background option. Three general principals apply to debugging promotion paths Disable all actions Make sure this works before enabling the actions one at a time. After enabling each action, run the promotion again. You can only be sure that a promotion has been defined correctly if it can be run twice. If the ACL of the target has been set incorrectly the promotion may work the first time, but on the second time, it may be that the ACL of the target does not allow the signing ID to overwrite it during the second promotion. If a particular step fails, try and perform the step manually. For example, if a LotusScript recompile fails, go into Domino Designer, switch to the ID being used during the promotion (if necessary) and try Tools|Recompile All LotusScript .","title":"Troubleshooting"},{"location":"troubleshooting/#troubleshooting","text":"If unexpected build failures occur, there are two options that can be set to help diagnose the problem. Turn up logging. Click the Build Manager button on the toolbar and select Settings... . Change the Logging Detail from * Default to All Function Calls . Promote again and check the log. Run actions in the foreground. Click the Build Manager button on the toolbar and select Settings... \u2019. Uncheck (deselect) the Run utilities in background option. Three general principals apply to debugging promotion paths Disable all actions Make sure this works before enabling the actions one at a time. After enabling each action, run the promotion again. You can only be sure that a promotion has been defined correctly if it can be run twice. If the ACL of the target has been set incorrectly the promotion may work the first time, but on the second time, it may be that the ACL of the target does not allow the signing ID to overwrite it during the second promotion. If a particular step fails, try and perform the step manually. For example, if a LotusScript recompile fails, go into Domino Designer, switch to the ID being used during the promotion (if necessary) and try Tools|Recompile All LotusScript .","title":"Troubleshooting"},{"location":"version/","text":"Make Version with CIAO Automate CIAO version creation. Note This step requires that Teamstudio CIAO is installed on the workstation that is performing the promotion. To Create a Make Version Step Select the Promotion path document to which you want to add the Make Version step. Click the Create button followed by Make Version . The Make Version document appears. The Make Version document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Gold Version). Uncheck Prompt for Version if you want to promote without user intervention. You need to provide a version comment and label, whether to bump version numbers, and which options to use (Store As Zip, Save Documents, Save ACL or Save Replication Settings). Leave this option selected if you want CIAO to prompt you with the Make Version dialog box for each promotion. Save and close the document. The new Make Version entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"Make Version with CIAO"},{"location":"version/#make-version-with-ciao","text":"Automate CIAO version creation. Note This step requires that Teamstudio CIAO is installed on the workstation that is performing the promotion.","title":"Make Version with CIAO"},{"location":"version/#to-create-a-make-version-step","text":"Select the Promotion path document to which you want to add the Make Version step. Click the Create button followed by Make Version . The Make Version document appears. The Make Version document is active by default. Leave this setting. Enter a descriptive name in the Description field (for example, Gold Version). Uncheck Prompt for Version if you want to promote without user intervention. You need to provide a version comment and label, whether to bump version numbers, and which options to use (Store As Zip, Save Documents, Save ACL or Save Replication Settings). Leave this option selected if you want CIAO to prompt you with the Make Version dialog box for each promotion. Save and close the document. The new Make Version entry appears in the right pane, under the Build or Promotion Path to which it applies.","title":"To Create a Make Version Step"}]}